This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-12T01:00:46.752Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.github/
  PULL_REQUEST_TEMPLATE.md
assets/
  copy/
    js/
      server.js
    react-components/
      index.js
      simple.jsx
    package.json
    postcss.config.js
    tsconfig.json
    vite.config.js
  js/
    live_react/
      hooks.js
      index.mjs
      server.mjs
      vite-plugin.js
config/
  config.exs
guides/
  deployment.md
  development.md
  installation.md
  ssr.md
lib/
  live_react/
    ssr/
      node_js.ex
      vite_js.ex
    reload.ex
    slots.ex
    ssr.ex
  mix/
    tasks/
      setup.ex
  live_react.ex
live_react_examples/
  assets/
    css/
      app.css
    js/
      app.js
      server.js
    react-components/
      components/
        lazy-component.jsx
      lib/
        utils.ts
      ui/
        dual-range-slider.tsx
        label.tsx
      counter.jsx
      delay-slider.tsx
      flash-sonner.jsx
      github-code.jsx
      index.jsx
      lazy.jsx
      log-list.jsx
      simple-props.jsx
      simple.jsx
      slot.tsx
      ssr.jsx
      typescript.tsx
    package.json
    postcss.config.js
    tailwind.config.js
    tsconfig.json
    vite.config.js
  config/
    config.exs
    dev.exs
    prod.exs
    runtime.exs
    test.exs
  lib/
    live_react_examples/
      application.ex
      telemetry.ex
    live_react_examples_web/
      components/
        layouts/
          app.html.heex
          root.html.heex
        core_components.ex
        layouts.ex
      controllers/
        page_html/
          home.html.heex
          lazy.html.heex
          simple_props.html.heex
          simple.html.heex
          typescript.html.heex
        error_html.ex
        error_json.ex
        page_controller.ex
        page_html.ex
      live/
        counter.ex
        demo_assigns.ex
        flash_sonner.ex
        hybrid_form.ex
        log_list.ex
        slot.ex
        ssr.ex
      endpoint.ex
      router.ex
      telemetry.ex
    live_react_examples_web.ex
    live_react_examples.ex
  priv/
    static/
      images/
        logo.svg
      robots.txt
  rel/
    overlays/
      bin/
        server
        server.bat
    env.sh.eex
  test/
    live_react_examples_web/
      controllers/
        error_html_test.exs
        error_json_test.exs
        page_controller_test.exs
    support/
      conn_case.ex
    test_helper.exs
  .dockerignore
  .formatter.exs
  .gitignore
  .prettierignore
  Dockerfile
  fly.toml
  mix.exs
  mix.lock
  README.md
test/
  live_react_test.exs
  test_helper.exs
.formatter.exs
.gitignore
.prettierignore
CHANGELOG.md
LICENSE.md
logo.svg
mix.exs
mix.lock
package.json
README.md

================================================================
Repository Files
================================================================

================
File: .github/PULL_REQUEST_TEMPLATE.md
================
# Contributor checklist

- [ ] My commit messages follow the [Conventional Commit Message Format](https://gist.github.com/stephenparish/9941e89d80e2bc58a153#format-of-the-commit-message)
      For example: `fix: Multiply by appropriate coefficient`, or
      `feat(Calculator): Correctly preserve history`
      Any explanation or long form information in your commit message should be
      in a separate paragraph, separated by a blank line from the primary message

================
File: assets/copy/js/server.js
================
// Used by the node.js worker for server-side rendering
import { getRender } from "live_react/server";
import components from "../react-components";

export const render = getRender(components);

================
File: assets/copy/react-components/index.js
================
import { Simple } from "./simple";

export default {
  Simple,
};

================
File: assets/copy/react-components/simple.jsx
================
import React from "react";

export function Simple({}) {
  return <div>Hello world!</div>;
}

================
File: assets/copy/package.json
================
{
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite --host -l warn",
    "build": "tsc && vite build",
    "build-server": "tsc && vite build --ssr js/server.js --out-dir ../priv/react-components --minify esbuild && echo '{\"type\": \"module\" } ' > ../priv/react-components/package.json"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.3.1",
    "vite": "^5.4.7",
    "@tailwindcss/forms": "^0.5.7",
    "autoprefixer": "^10.4.19",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.12",
    "typescript": "^5.6.2",
    "@types/react": "^18.3.11",
    "@types/react-dom": "^18.3.0"
  },
  "dependencies": {
    "live_react": "file:../deps/live_react",
    "phoenix": "file:../deps/phoenix",
    "phoenix_html": "file:../deps/phoenix_html",
    "phoenix_live_view": "file:../deps/phoenix_live_view",
    "topbar": "^2.0.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  }
}

================
File: assets/copy/postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

================
File: assets/copy/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["dom", "dom.iterable", "ES2020"],
    "allowJs": true,
    "skipLibCheck": true,
    "types": ["vite/client"],
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "esnext",
    "moduleResolution": "node",
    "isolatedModules": true,
    "resolveJsonModule": true,
    "noEmit": true,
    "jsx": "react",
    "sourceMap": true,
    "declaration": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "incremental": true,
    "noFallthroughCasesInSwitch": true,

    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["js/*", "react/**/*"]
}

================
File: assets/copy/vite.config.js
================
import path from "path";
import { defineConfig } from "vite";

import react from "@vitejs/plugin-react";
import liveReactPlugin from "live_react/vite-plugin";

// https://vitejs.dev/config/
export default defineConfig(({ command }) => {
  const isDev = command !== "build";

  return {
    base: isDev ? undefined : "/assets",
    publicDir: "static",
    plugins: [react(), liveReactPlugin()],
    ssr: {
      // we need it, because in SSR build we want no external
      // and in dev, we want external for fast updates
      noExternal: isDev ? undefined : true,
    },
    resolve: {
      alias: {
        "@": path.resolve(__dirname, "."),
      },
    },
    optimizeDeps: {
      // these packages are loaded as file:../deps/<name> imports
      // so they're not optimized for development by vite by default
      // we want to enable it for better DX
      // more https://vitejs.dev/guide/dep-pre-bundling#monorepos-and-linked-dependencies
      include: ["live_react", "phoenix", "phoenix_html", "phoenix_live_view"],
    },
    build: {
      commonjsOptions: { transformMixedEsModules: true },
      target: "es2020",
      outDir: "../priv/static/assets", // emit assets to priv/static/assets
      emptyOutDir: true,
      sourcemap: isDev, // enable source map in dev build
      manifest: false, // do not generate manifest.json
      rollupOptions: {
        input: {
          app: path.resolve(__dirname, "./js/app.js"),
        },
        output: {
          // remove hashes to match phoenix way of handling asssets
          entryFileNames: "[name].js",
          chunkFileNames: "[name].js",
          assetFileNames: "[name][extname]",
        },
      },
    },
  };
});

================
File: assets/js/live_react/hooks.js
================
import React from "react";
import ReactDOM from "react-dom/client";

function getAttributeJson(el, attributeName) {
  const data = el.getAttribute(attributeName);
  return data ? JSON.parse(data) : {};
}

function getChildren(hook) {
  const dataSlots = getAttributeJson(hook.el, "data-slots");

  if (!dataSlots?.default) {
    return [];
  }

  return [
    React.createElement("div", {
      dangerouslySetInnerHTML: { __html: atob(dataSlots.default).trim() },
    }),
  ];
}

function getProps(hook) {
  return {
    ...getAttributeJson(hook.el, "data-props"),
    // pass the hook callbacks to the component
    pushEvent: hook.pushEvent.bind(hook),
    pushEventTo: hook.pushEventTo.bind(hook),
    handleEvent: hook.handleEvent.bind(hook),
    upload: hook.upload.bind(hook),
    uploadTo: hook.uploadTo.bind(hook),
  };
}

export function getHooks(components) {
  const ReactHook = {
    _render() {
      this._root.render(
        React.createElement(
          this._Component,
          getProps(this),
          ...getChildren(this),
        ),
      );
    },
    mounted() {
      const componentName = this.el.getAttribute("data-name");
      if (!componentName) {
        throw new Error("Component name must be provided");
      }

      this._Component = components[componentName];

      const isSSR = this.el.hasAttribute("data-ssr");

      if (isSSR) {
        this._root = ReactDOM.hydrateRoot(
          this.el,
          React.createElement(
            this._Component,
            getProps(this),
            ...getChildren(this),
          ),
        );
      } else {
        this._root = ReactDOM.createRoot(this.el);
        this._render();
      }
    },
    updated() {
      if (this._root) {
        this._render();
      }
    },
    destroyed() {
      if (this._root) {
        window.addEventListener(
          "phx:page-loading-stop",
          () => this._root.unmount(),
          { once: true },
        );
      }
    },
  };

  return { ReactHook };
}

================
File: assets/js/live_react/index.mjs
================
export { getHooks } from "./hooks";

================
File: assets/js/live_react/server.mjs
================
import React from "react";
import { renderToString } from "react-dom/server";

function Wrapper({ children }) {
  return React.createElement(React.Fragment, null, children);
}

export function getRender(components) {
  return function render(name, props, slots) {
    const Component = components[name];
    if (!Component) {
      throw new Error(`Component "${name}" not found`);
    }

    let children = [];
    if (slots?.default) {
      children.push(
        React.createElement("div", {
          dangerouslySetInnerHTML: { __html: slots.default.trim() },
        }),
      );
    }

    // The Component need to be wrapped to prevent useState useEffect error which can't be root component
    const componentInstance = React.createElement(
      Component,
      props,
      ...children,
    );
    const content = React.createElement(Wrapper, null, componentInstance);

    // https://react.dev/reference/react-dom/server/renderToString
    return renderToString(content);
  };
}

================
File: assets/js/live_react/vite-plugin.js
================
function hotUpdateType(path) {
  if (path.endsWith("css")) return "css-update";
  if (path.endsWith("js")) return "js-update";
  return null;
}

const jsonResponse = (res, statusCode, data) => {
  res.statusCode = statusCode;
  res.setHeader("Content-Type", "application/json");
  res.end(JSON.stringify(data));
};

// Custom JSON parsing middleware
const jsonMiddleware = (req, res, next) => {
  let data = "";

  // Listen for data event to collect the chunks of data
  req.on("data", (chunk) => {
    data += chunk;
  });

  // Listen for end event to finish data collection
  req.on("end", () => {
    try {
      // Parse the collected data as JSON
      req.body = JSON.parse(data);
      next(); // Proceed to the next middleware
    } catch (error) {
      // Handle JSON parse error
      jsonResponse(res, 400, { error: "Invalid JSON" });
    }
  });

  // Handle error event
  req.on("error", (err) => {
    console.error(err);
    jsonResponse(res, 500, { error: "Internal Server Error" });
  });
};

function liveReactPlugin(opts = {}) {
  return {
    name: "live-react",
    handleHotUpdate({ file, modules, server, timestamp }) {
      if (file.match(/\.(heex|ex)$/)) {
        // if it's and .ex or .heex file, invalidate all related files so they'll be updated correctly
        const invalidatedModules = new Set();
        for (const mod of modules) {
          server.moduleGraph.invalidateModule(
            mod,
            invalidatedModules,
            timestamp,
            true,
          );
        }

        const updates = Array.from(invalidatedModules)
          .filter((m) => hotUpdateType(m.file))
          .map((m) => ({
            type: hotUpdateType(m.file),
            path: m.url,
            acceptedPath: m.url,
            timestamp: timestamp,
          }));

        // ask client to hot-reload updated modules
        server.ws.send({ type: "update", updates: updates });

        // we handle the hot update ourselves
        return [];
      }
    },
    configureServer(server) {
      // Terminate the watcher when Phoenix quits
      // configureServer is only called in dev, so it's safe to use here
      process.stdin.on("close", () => process.exit(0));
      process.stdin.resume();

      // setup SSR endpoint /ssr_render
      const path = opts.path || "/ssr_render";
      const entrypoint = opts.entrypoint || "./js/server.js";
      server.middlewares.use(function liveReactMiddleware(req, res, next) {
        if (req.method == "POST" && req.url.split("?", 1)[0] === path) {
          jsonMiddleware(req, res, async () => {
            try {
              const render = (await server.ssrLoadModule(entrypoint)).render;
              const html = await render(
                req.body.name,
                req.body.props,
                req.body.slots,
              );
              res.end(html);
            } catch (e) {
              server.ssrFixStacktrace(e);
              jsonResponse(res, 500, { error: e });
            }
          });
        } else {
          next();
        }
      });
    },
  };
}

module.exports = liveReactPlugin;

================
File: config/config.exs
================
import Config

if Mix.env() == :dev do
  config :git_ops,
    mix_project: Mix.Project.get!(),
    changelog_file: "CHANGELOG.md",
    repository_url: "https://github.com/mrdotb/live_react",
    # Instructs the tool to manage your mix version in your `mix.exs` file
    # See below for more information
    manage_mix_version?: true,
    # Instructs the tool to manage the version in your README.md
    # Pass in `true` to use `"README.md"` or a string to customize
    manage_readme_version: [
      "README.md"
    ],
    version_tag_prefix: "v"
end

================
File: guides/deployment.md
================
# Deployment

[Without SSR](#without-ssr)
[With SSR](#with-ssr)

## Without SSR

The following steps are needed to deploy to Fly.io. This guide assumes that you'll be using Fly Postgres as your database. Further guidance on how to deploy to Fly.io can be found [here](https://fly.io/docs/elixir/getting-started/).

1. Generate a `Dockerfile`:

```bash
mix phx.gen.release --docker
```

2. Modify the generated `Dockerfile` to install `curl`, which is used to install `nodejs` (version 19 or greater), and also add a step to install our `npm` dependencies:

```diff
# ./Dockerfile

...

# install build dependencies
- RUN apt-get update -y && apt-get install -y build-essential git \
+ RUN apt-get update -y && apt-get install -y build-essential git curl \
    && apt-get clean && rm -f /var/lib/apt/lists/*_*

+ # install nodejs for build stage
+ RUN curl -fsSL https://deb.nodesource.com/setup_19.x | bash - && apt-get install -y nodejs

...

COPY assets assets

+ # install all npm packages in assets directory
+ RUN cd /app/assets && npm install
```

Note: `nodejs` is installed in the build stage. This is because we need `nodejs` to install our `npm` dependencies.

3. Launch your app with the Fly.io CLI:

```bash
fly launch
```

4. When prompted to tweak settings, choose `y`:

```bash
? Do you want to tweak these settings before proceeding? (y/N) y
```

This will launch a new window where you can tweak your launch settings. In the database section, choose `Fly Postgres` and enter a name for your database. You may also want to change your database to the development configuration to avoid extra costs. You can leave the rest of the settings as-is unless you want to change them.

Deployment will continue once you hit confirm.

5. Once the deployment completes, run the following command to see your deployed app!

```bash
fly apps open
```

## With SSR

See the [SSR guide](/guides/ssr.md) first to setup your project.

The following steps are needed to deploy to Fly.io. This guide assumes that you'll be using Fly Postgres as your database. Further guidance on how to deploy to Fly.io can be found [here](https://fly.io/docs/elixir/getting-started/).

1. Generate a `Dockerfile`:

```bash
mix phx.gen.release --docker
```

2. Modify the generated `Dockerfile` to install `curl`, which is used to install `nodejs` (version 19 or greater), and also add a step to install our `npm` dependencies:

```diff
# ./Dockerfile

...

# install build dependencies
- RUN apt-get update -y && apt-get install -y build-essential git \
+ RUN apt-get update -y && apt-get install -y build-essential git curl \
    && apt-get clean && rm -f /var/lib/apt/lists/*_*

+ # install nodejs for build stage
+ RUN curl -fsSL https://deb.nodesource.com/setup_19.x | bash - && apt-get install -y nodejs

...

COPY assets assets

+ # install all npm packages in assets directory
+ RUN cd /app/assets && npm install

...

# start a new build stage so that the final image will only contain
# the compiled release and other runtime necessities
FROM ${RUNNER_IMAGE}

RUN apt-get update -y && \
-  apt-get install -y libstdc++6 openssl libncurses5 locales ca-certificates \
+  apt-get install -y libstdc++6 openssl libncurses5 locales ca-certificates curl \
   && apt-get clean && rm -f /var/lib/apt/lists/*_*

+ # install nodejs for production environment
+ RUN curl -fsSL https://deb.nodesource.com/setup_19.x | bash - && apt-get install -y nodejs

...
```

Note: `nodejs` is installed BOTH in the build stage and in the final image. This is because we need `nodejs` to install our `npm` dependencies and also need it when running our app.

3. Launch your app with the Fly.io CLI:

```bash
fly launch
```

4. When prompted to tweak settings, choose `y`:

```bash
? Do you want to tweak these settings before proceeding? (y/N) y
```

This will launch a new window where you can tweak your launch settings. In the database section, choose `Fly Postgres` and enter a name for your database. You may also want to change your database to the development configuration to avoid extra costs. You can leave the rest of the settings as-is unless you want to change them.

Deployment will continue once you hit confirm.

5. Once the deployment completes, run the following command to see your deployed app!

```bash
fly apps open
```

================
File: guides/development.md
================
# Development

The easiest way to get started with development is to clone live_react and run the examples

```bash
git clone https://github.com/mrdotb/live_react.git
cd live_react_examples
```

================
File: guides/installation.md
================
# Installation

LiveReact replaces `hex esbuild` with [Vite](https://vite.dev/) for both client side code and SSR to achieve a better development experience. Why ?

- Vite provides a best-in-class Hot-Reload functionality and offers [many benefits](https://vitejs.dev/guide/why#why-vite) not present in esbuild
- `hex esbuild` package doesn't support plugins, while it's possible to do ssr with `hex esbuild` (check [v0.2.0-rc-0](https://github.com/mrdotb/live_react/tree/v0.2.0-rc.0)) the SSR in development is broken.
- the integration to react and ssr is more documented with Vite

In production, we'll use [elixir-nodejs](https://github.com/revelrylabs/elixir-nodejs) for SSR. If you don't need SSR, you can disable it with one line of code. TypeScript will be supported as well.

## Steps

0. install nodejs (I recommend [mise](https://mise.jdx.dev/))

1. Add `live_react` to your list of dependencies in `mix.exs` and run `mix deps.get`

```elixir
def deps do
  [
    {:live_react, "~> 1.0.0-rc.3"},
    {:nodejs, "~> 3.1.2"} # if you want to use SSR in production
  ]
end
```

2. Add a config entry to your `config/dev.exs`

```elixir
config :live_react,
  vite_host: "http://localhost:5173",
  ssr_module: LiveReact.SSR.ViteJS,
  ssr: true
```

3. Add a config entry to your `config/prod.exs`

```elixir
config :live_react,
  ssr_module: LiveReact.SSR.NodeJS,
  ssr: true # or false if you don't want SSR in production
```

4. Add `import LiveReact` in `html_helpers/0` inside `/lib/<app_name>_web.ex` like so:

```elixir
# /lib/<app_name>_web.ex

defp html_helpers do
  quote do

    # ...

    import LiveReact # <-- Add this line

    # ...

  end
end
```

5. LiveReact comes with a handy mix task to setup all the required files. It won't alter any files you already have in your project, you need to adjust them on your own by looking at the [sources](https://github.com/mrdotb/live_react/tree/main/assets/copy). Additional instructions how to adjust `package.json` can be found at the end of this page.

It will create:

- `package.json`
- vite, typescript and postcss configs
- server entrypoint
- react components root

6. Run the following in your terminal

```bash
mix deps.get
mix live_react.setup
npm install --prefix assets
```

7. Add the following to your `assets/js/app.js` file

```javascript
...
import topbar from "topbar" // instead of ../vendor/topbar
import { getHooks } from  "live_react";
import components from "../react-components";
import "../css/app.css" // the css file is handled by vite

const hooks = {
  // ... your other hooks
  ...getHooks(components),
};

...

let liveSocket = new LiveSocket("/live", Socket, {
  hooks: hooks, // <- pass the hooks
  longPollFallbackMs: 2500,
  params: { _csrf_token: csrfToken },
});
...
```

7. For tailwind support, make some addition to `content` in the `assets/tailwind.config.js` file

```javascript
content: [
  ...
    "./react-components/**/*.jsx", // <- if you are using jsx
    "./react-components/**/*.tsx" // <- if you are using tsx
],

```

8. Let's update `root.html.heex` to use Vite files in development. There's a handy wrapper for it.

```html
<LiveReact.Reload.vite_assets assets={["/js/app.js", "/css/app.css"]}>
  <link phx-track-static rel="stylesheet" href={~p"/assets/app.css"} />
  <script type="module" phx-track-static type="text/javascript" src={~p"/assets/app.js"}>
  </script>
</LiveReact.Reload.vite_assets>
```

9. Update `mix.exs` aliases and remove `tailwind` and `esbuild` packages

```elixir
defp aliases do
[
  setup: ["deps.get", "assets.setup", "assets.build"],
  "assets.setup": ["cmd --cd assets npm install"],
  "assets.build": [
    "cmd --cd assets npm run build",
    "cmd --cd assets npm run build-server"
  ],
  "assets.deploy": [
    "cmd --cd assets npm run build",
    "cmd --cd assets npm run build-server",
    "phx.digest"
  ]
]
end

defp deps do
  [
    # remove these lines, we don't need esbuild or tailwind here anymore
    # {:esbuild, "~> 0.8", runtime: Mix.env() == :dev},
    # {:tailwind, "~> 0.2", runtime: Mix.env() == :dev},
  ]
end
```

10. Remove esbuild and tailwind config from `config/config.exs`

11. Update watchers in `config/dev.exs` to look like this

```elixir
config :my_app, MyAppWeb.Endpoint,
  # ...
  watchers: [
    npm: ["run", "dev", cd: Path.expand("../assets", __DIR__)]
  ]
```

12. To make SSR working with `LiveReact.SSR.NodeJS` in production, you have to add this entry to your `application.ex` supervision tree to run the NodeJS server

If you don't want SSR in production, you can skip this step.

```elixir
children = [
  ...
  {NodeJS.Supervisor, [path: LiveReact.SSR.NodeJS.server_path(), pool_size: 4]},
  # note Adjust the pool_size depending of the machine
]
```

13. Confirm everything is working by rendering the default React component anywhere in your Dead or Live Views

```elixir
<.react name="Simple" />
```

14. (Optional) enable [stateful hot reload](https://twitter.com/jskalc/status/1788308446007132509) of phoenix LiveViews - it allows for stateful reload across the whole stack 🤯. Just adjust your `dev.exs` to look like this - add `notify` section and remove `live|components` from patterns.

```elixir
# Watch static and templates for browser reloading.
config :my_app, MyAppWeb.Endpoint,
  live_reload: [
    notify: [
      live_view: [
        ~r"lib/my_app_web/core_components.ex$",
        ~r"lib/my_app_web/(live|components)/.*(ex|heex)$"
      ]
    ],
    patterns: [
      ~r"priv/static/(?!uploads/).*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"lib/my_app_web/controllers/.*(ex|heex)$"
    ]
  ]
```

Profit! 💸

## Adjusting your own package.json

Install these packages

```bash
cd assets

# vite
npm install -D vite @vitejs/plugin-react

# tailwind
npm install -D tailwindcss autoprefixer postcss @tailwindcss/forms

# typescript
npm install -D typescript @types/react @types/react-dom

# runtime dependencies
npm install --save react react-dom topbar ../deps/live_react ../deps/phoenix ../deps/phoenix_html ../deps/phoenix_live_view

# remove topbar from vendor, since we'll use it from node_modules
rm vendor/topbar.js
```

and add these scripts used by watcher and `mix assets.build` command

```json
{
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite --host -l warn",
    "build": "tsc && vite build",
    "build-server": "tsc && vite build --ssr js/server.js --out-dir ../priv/react-components --minify esbuild && echo '{\"type\": \"module\" } ' > ../priv/react-components/package.json"
  }
}
```

================
File: guides/ssr.md
================
# Server Side Rendering (SSR)

_Disclaimer_ SSR for React is not a simple topic and there is a lot of issue than can arise depending on what React components you are using. It also consume more ressource since a nodejs worker is needed for the rendering. This is a simple implementation that works for the components and library I have tested.

## Project setup

⚠️ **Warning:** Server-side rendering (SSR) requires a Node.js worker. With a `pool_size` of 1 and the Phoenix app, you need at least **512MiB** of memory. Otherwise, the instance may experience **out-of-memory (OOM)** errors or severe slowness.

SSR requires Node.js to render the javascript on server side. Add `nodejs` to your mix file.

```elixir
defp deps do
  [
    {:nodejs, "~> 3.1"},
    ...
  ]
end
```

Add NodeJs.Supervisor to your `application.ex`

```elixir
def start(_type, _args) do
  children = [
    ...
    {NodeJS.Supervisor, [path: LiveReact.SSR.NodeJS.server_path(), pool_size: 4]},
  ]
end
```

Add a config entry to your `config/prod.exs`

```elixir
config :live_react,
  ssr_module: LiveReact.SSR.NodeJS,
  ssr: true
```

For complete deployment follow the [SSR deployment guide](/guides/deployment.md#with-ssr)

================
File: lib/live_react/ssr/node_js.ex
================
defmodule LiveReact.SSR.NodeJS do
  @moduledoc """
  Implements SSR by using `NodeJS` package.

  Under the hood, it invokes "render" function exposed by `server.js` file.
  You can see how `server.js` is created by looking at `assets.deploy` command
  and `package.json` build-server script.
  """

  @behaviour LiveReact.SSR

  def render(name, props, slots) do
    filename = Application.get_env(:live_react, :ssr_filepath, "./react-components/server.js")

    if Code.ensure_loaded?(NodeJS) do
      try do
        # Dynamically apply the NodeJS.call!/3 to avoid compiler warning
        apply(NodeJS, :call!, [
          {filename, "render"},
          [name, props, slots],
          [binary: true, esm: true]
        ])
      catch
        :exit, {:noproc, _} ->
          message = """
          NodeJS is not configured. Please add the following to your application.ex:
          {NodeJS.Supervisor, [path: LiveReact.SSR.NodeJS.server_path(), pool_size: 4]},
          """

          raise %LiveReact.SSR.NotConfigured{message: message}
      end
    else
      message = """
      NodeJS is not installed. Please add the following to mix.ex deps:
      `{:nodejs, "~> 3.1"}`
      """

      raise %LiveReact.SSR.NotConfigured{message: message}
    end
  end

  def server_path() do
    {:ok, path} = :application.get_application()
    Application.app_dir(path, "/priv")
  end
end

================
File: lib/live_react/ssr/vite_js.ex
================
defmodule LiveReact.SSR.ViteJS do
  @moduledoc """
  Implements SSR by making a POST request to `http://{:vite_host}/ssr_render`.

  `ssr_render` is implemented as a Vite plugin. You have to add it to the `vite.config.js` plugins section.

  ```javascript
  import liveReactPlugin from "live_react/vite-plugin";

  {
    publicDir: "static",
    plugins: [react(), liveReactPlugin()],
    // ...
  }
  """

  @behaviour LiveReact.SSR

  def render(name, props, slots) do
    data = Jason.encode!(%{name: name, props: props, slots: slots})
    url = vite_path("/ssr_render")
    params = {String.to_charlist(url), [], ~c"application/json", data}

    case :httpc.request(:post, params, [], []) do
      {:ok, {{_, 200, _}, _headers, body}} ->
        :erlang.list_to_binary(body)

      {:ok, {{_, 500, _}, _headers, body}} ->
        case Jason.decode(body) do
          {:ok, %{"error" => %{"message" => msg, "loc" => loc, "frame" => frame}}} ->
            {:error, "#{msg}\n#{loc["file"]}:#{loc["line"]}:#{loc["column"]}\n#{frame}"}

          _ ->
            {:error, "Unexpected Vite SSR response: 500 #{body}"}
        end

      {:ok, {{_, status, code}, _headers, _body}} ->
        {:error, "Unexpected Vite SSR response: #{status} #{code}"}

      {:error, {:failed_connect, [{:to_address, {url, port}}, {_, _, code}]}} ->
        {:error, "Unable to connect to Vite #{url}:#{port}: #{code}"}
    end
  end

  @doc """
  A handy utility returning path relative to Vite JS host.
  """
  def vite_path(path) do
    case Application.get_env(:live_react, :vite_host) do
      nil ->
        message = """
        Vite.js host is not configured. Please add the following to config/dev.ex

        config :live_react, vite_host: "http://localhost:5173"

        and ensure vite.js is running
        """

        raise %LiveReact.SSR.NotConfigured{message: message}

      host ->
        # we get rid of assets prefix since for vite /assets is root
        Path.join(host, path)
    end
  end
end

================
File: lib/live_react/reload.ex
================
defmodule LiveReact.Reload do
  @moduledoc """
  Utilities for easier integration with Vite in development
  """

  use Phoenix.Component

  attr(:assets, :list, required: true)
  slot(:inner_block, required: true, doc: "what should be rendered when Vite path is not defined")

  @doc """
  Renders the vite assets in development, and in production falls back to normal compiled assets
  """
  def vite_assets(assigns) do
    assigns =
      assigns
      |> assign(
        :stylesheets,
        for(path <- assigns.assets, String.ends_with?(path, ".css"), do: path)
      )
      |> assign(
        :javascripts,
        for(path <- assigns.assets, String.ends_with?(path, ".js"), do: path)
      )

    # TODO - maybe make it configurable in other way than by presence of vite_host config?
    # https://vitejs.dev/guide/backend-integration.html
    ~H"""
    <%= if Application.get_env(:live_react, :vite_host) do %>
      <script type="module">
        import RefreshRuntime from '<%= LiveReact.SSR.ViteJS.vite_path("@react-refresh") %>'
        RefreshRuntime.injectIntoGlobalHook(window)
        window.$RefreshReg$ = () => {}
        window.$RefreshSig$ = () => (type) => type
        window.__vite_plugin_react_preamble_installed__ = true
      </script>
      <script type="module" src={LiveReact.SSR.ViteJS.vite_path("@vite/client")}>
      </script>
      <link :for={path <- @stylesheets} rel="stylesheet" href={LiveReact.SSR.ViteJS.vite_path(path)} />
      <script :for={path <- @javascripts} type="module" src={LiveReact.SSR.ViteJS.vite_path(path)}>
      </script>
    <% else %>
      <%= render_slot(@inner_block) %>
    <% end %>
    """
  end
end

================
File: lib/live_react/slots.ex
================
defmodule LiveReact.Slots do
  @moduledoc false

  import Phoenix.Component

  @doc false
  def rendered_slot_map(assigns) do
    for(
      {key, [%{__slot__: _}] = slot} <- assigns,
      into: %{},
      do:
        case(key) do
          :inner_block ->
            {:default, render(%{slot: slot})}

          slot_name ->
            raise "Unsupported slot: #{slot_name}, only one default slot is supported, passed as React children."
        end
    )
  end

  @doc false
  def base_encode_64(assigns) do
    for {key, value} <- assigns, into: %{}, do: {key, Base.encode64(value)}
  end

  @doc false
  defp render(assigns) do
    ~H"""
    <%= if assigns[:slot] do %>
      <%= render_slot(@slot) %>
    <% end %>
    """
    |> Phoenix.HTML.Safe.to_iodata()
    |> List.to_string()
    |> String.trim()
  end
end

================
File: lib/live_react/ssr.ex
================
defmodule LiveReact.SSR.NotConfigured do
  @moduledoc false

  defexception [:message]
end

defmodule LiveReact.SSR do
  require Logger

  @moduledoc """
  A behaviour for rendering React components server-side.

  To define a custom renderer, change the application config in `config.exs`:

      config :live_react, ssr_module: MyCustomSSRModule

  Exposes a telemetry span for each render under key `[:live_react, :ssr]`
  """

  @type component_name :: String.t()
  @type props :: %{optional(String.t() | atom) => any}
  @type slots :: %{optional(String.t()) => any}

  @typedoc """
  A render response which should have shape

  %{
    html: string,
  }
  """
  @type render_response :: %{optional(String.t() | atom) => any}

  @callback render(component_name, props, slots) :: render_response | no_return

  @spec render(component_name, props, slots) :: render_response | no_return
  def render(name, props, slots) do
    case Application.get_env(:live_react, :ssr_module, nil) do
      nil ->
        %{preloadLinks: "", html: ""}

      mod ->
        meta = %{component: name, props: props, slots: slots}

        body =
          :telemetry.span([:live_react, :ssr], meta, fn ->
            {mod.render(name, props, slots), meta}
          end)

        with body when is_binary(body) <- body do
          case String.split(body, "<!-- preload -->", parts: 2) do
            [links, html] -> %{preloadLinks: links, html: html}
            [body] -> %{preloadLinks: "", html: body}
          end
        end
    end
  end
end

================
File: lib/mix/tasks/setup.ex
================
defmodule Mix.Tasks.LiveReact.Setup do
  @moduledoc """
  Copies files from assets/copy of the live_react dependency to phoenix project assets folder
  """
  @shortdoc "copy setup files to assets"

  use Mix.Task

  @impl Mix.Task
  def run(_args) do
    Mix.Project.deps_paths(depth: 1)
    |> Map.fetch!(:live_react)
    |> Path.join("assets/copy/**/{*.*}")
    |> Path.wildcard(match_dot: true)
    |> Enum.each(fn full_path ->
      [_beginning, relative_path] = String.split(full_path, "copy", parts: 2)
      new_path = "assets" <> relative_path

      case File.exists?(new_path) do
        true ->
          log_info(~s/Did not copy `#{full_path}` to `#{new_path}` since file already exists/)

        false ->
          Mix.Generator.copy_file(full_path, new_path)
      end
    end)
  end

  defp log_info(status), do: Mix.shell().info([status, :reset])
end

================
File: lib/live_react.ex
================
defmodule LiveReact do
  @moduledoc """
  See READ.md for installation instructions and examples.
  """

  use Phoenix.Component
  import Phoenix.HTML

  alias Phoenix.LiveView
  alias LiveReact.SSR
  alias LiveReact.Slots

  require Logger

  @ssr_default Application.compile_env(:live_react, :ssr, true)

  @doc """
  Render a React component.
  """
  def react(assigns) do
    init = assigns.__changed__ == nil
    dead = assigns[:socket] == nil or not LiveView.connected?(assigns[:socket])
    render_ssr? = init and dead and Map.get(assigns, :ssr, @ssr_default)

    # we manually compute __changed__ for the computed props and slots so it's not sent without reason
    {props, props_changed?} = extract(assigns, :props)
    {slots, slots_changed?} = extract(assigns, :slots)
    component_name = Map.get(assigns, :name)

    assigns =
      assigns
      |> Map.put_new(:class, nil)
      |> Map.put(:__component_name, component_name)
      |> Map.put(:props, props)
      |> Map.put(:slots, if(slots_changed?, do: Slots.rendered_slot_map(slots), else: %{}))

    assigns =
      Map.put(assigns, :ssr_render, if(render_ssr?, do: ssr_render(assigns), else: nil))

    computed_changed =
      %{
        props: props_changed?,
        slots: slots_changed?,
        ssr_render: render_ssr?
      }

    assigns =
      update_in(assigns.__changed__, fn
        nil -> nil
        changed -> for {k, true} <- computed_changed, into: changed, do: {k, true}
      end)

    # It's important to not add extra `\n` in the inner div or it will break hydration
    ~H"""
    <div
      id={assigns[:id] || id(@__component_name)}
      data-name={@__component_name}
      data-props={"#{json(@props)}"}
      data-slots={"#{@slots |> Slots.base_encode_64 |> json}"}
      data-ssr={is_map(@ssr_render)}
      phx-update="ignore"
      phx-hook="ReactHook"
      class={@class}
    ><%= raw(@ssr_render[:html]) %></div>
    """
  end

  defp extract(assigns, type) do
    Enum.reduce(assigns, {%{}, false}, fn {key, value}, {acc, changed} ->
      case normalize_key(key, value) do
        ^type -> {Map.put(acc, key, value), changed || key_changed(assigns, key)}
        _ -> {acc, changed}
      end
    end)
  end

  defp normalize_key(key, _val) when key in ~w(id class ssr name socket __changed__ __given__)a,
    do: :special

  defp normalize_key(_key, [%{__slot__: _}]), do: :slots
  defp normalize_key(key, val) when is_atom(key), do: key |> to_string() |> normalize_key(val)
  defp normalize_key(_key, _val), do: :props

  defp key_changed(%{__changed__: nil}, _key), do: true
  defp key_changed(%{__changed__: changed}, key), do: changed[key] != nil

  defp ssr_render(assigns) do
    try do
      name = Map.get(assigns, :name)

      SSR.render(name, assigns.props, assigns.slots)
    rescue
      SSR.NotConfigured ->
        nil
    end
  end

  defp json(data), do: Jason.encode!(data, escape: :html_safe)

  defp id(name) do
    # a small trick to avoid collisions of IDs but keep them consistent across dead and live render
    # id(name) is called only once during the whole LiveView lifecycle because it's not using any assigns
    number = Process.get(:live_react_counter, 1)
    Process.put(:live_react_counter, number + 1)
    "#{name}-#{number}"
  end
end

================
File: live_react_examples/assets/css/app.css
================
@import "tailwindcss/base";
@import "tailwindcss/components";
@import "tailwindcss/utilities";

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 0.5rem;
  }
}

================
File: live_react_examples/assets/js/app.js
================
// If you want to use Phoenix channels, run `mix help phx.gen.channel`
// to get started and then uncomment the line below.
// import "./user_socket.js"

// You can include dependencies in two ways.
//
// The simplest option is to put them in assets/vendor and
// import them using relative paths:
//
//     import "../vendor/some-package.js"
//
// Alternatively, you can `npm install some-package --prefix assets` and import
// them using a path starting with the package name:
//
//     import "some-package"
//
// Include phoenix_html to handle method=PUT/DELETE in forms and buttons.
import "phoenix_html";
// Establish Phoenix Socket and LiveView configuration.
import { Socket } from "phoenix";
import { LiveSocket } from "phoenix_live_view";
import topbar from "topbar";
import components from "../react-components";
import { getHooks } from "live_react";
import "../css/app.css";

const hooks = {
  ...getHooks(components),
};

let csrfToken = document
  .querySelector("meta[name='csrf-token']")
  .getAttribute("content");
let liveSocket = new LiveSocket("/live", Socket, {
  hooks: hooks,
  longPollFallbackMs: 2500,
  params: { _csrf_token: csrfToken },
});

// Show progress bar on live navigation and form submits
topbar.config({ barColors: { 0: "#29d" }, shadowColor: "rgba(0, 0, 0, .3)" });
window.addEventListener("phx:page-loading-start", (_info) => topbar.show(300));
window.addEventListener("phx:page-loading-stop", (_info) => topbar.hide());

// connect if there are any LiveViews on the page
liveSocket.connect();

// expose liveSocket on window for web console debug logs and latency simulation:
// >> liveSocket.enableDebug()
// >> liveSocket.enableLatencySim(1000)  // enabled for duration of browser session
// >> liveSocket.disableLatencySim()
window.liveSocket = liveSocket;

================
File: live_react_examples/assets/js/server.js
================
import components from "../react-components";
import { getRender } from "live_react/server";

export const render = getRender(components);

================
File: live_react_examples/assets/react-components/components/lazy-component.jsx
================
import React from "react";

const LazyComponent = () => (
  <div>
    <h2>I am a lazily loaded component!</h2>
    <p>
      The esbuild config and the script in `root.html.heex` need to updated
      check source code
    </p>
  </div>
);

export default LazyComponent;

================
File: live_react_examples/assets/react-components/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

================
File: live_react_examples/assets/react-components/ui/dual-range-slider.tsx
================
import * as SliderPrimitive from "@radix-ui/react-slider";
import * as React from "react";

import { cn } from "../lib/utils";

interface DualRangeSliderProps
  extends React.ComponentProps<typeof SliderPrimitive.Root> {
  labelPosition?: "top" | "bottom";
  label?: (value: number | undefined) => React.ReactNode;
}

const DualRangeSlider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  DualRangeSliderProps
>(({ className, label, labelPosition = "top", ...props }, ref) => {
  const initialValue = Array.isArray(props.value)
    ? props.value
    : [props.min, props.max];

  return (
    <SliderPrimitive.Root
      ref={ref}
      className={cn(
        "relative flex w-full touch-none select-none items-center",
        className,
      )}
      {...props}
    >
      <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
        <SliderPrimitive.Range className="absolute h-full bg-primary" />
      </SliderPrimitive.Track>
      {initialValue.map((value, index) => (
        <React.Fragment key={index}>
          <SliderPrimitive.Thumb className="relative block h-4 w-4 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50">
            {label && (
              <span
                className={cn(
                  "absolute flex w-full justify-center",
                  labelPosition === "top" && "-top-7",
                  labelPosition === "bottom" && "top-4",
                )}
              >
                {label(value)}
              </span>
            )}
          </SliderPrimitive.Thumb>
        </React.Fragment>
      ))}
    </SliderPrimitive.Root>
  );
});
DualRangeSlider.displayName = "DualRangeSlider";

export { DualRangeSlider };

================
File: live_react_examples/assets/react-components/ui/label.tsx
================
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";
import * as React from "react";

import { cn } from "../lib/utils";

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
);

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };

================
File: live_react_examples/assets/react-components/counter.jsx
================
import React, { useState } from "react";

export function Counter({ count, onInc, onDec }) {
  const [amount, setAmount] = useState(1);

  return (
    <div className="flex flex-col justify-center items-center gap-4">
      <div className="flex flex-row items-center justify-center gap-10">
        <button
          className="px-4 py-2 rounded bg-red-500 text-white"
          phx-click="set_count"
          value={count - amount}
        >
          -{amount}
        </button>
        <span className="text-xl">{count}</span>
        <button
          className="px-4 py-2 rounded bg-green-500 text-white"
          phx-click="set_count"
          value={count + amount}
        >
          +{amount}
        </button>
      </div>
      <label>
        Amount:
        <input
          onChange={(e) => setAmount(parseInt(e.target.value, 10))}
          type="number"
          className="rounded"
          value={amount}
          min="1"
        />
      </label>
    </div>
  );
}

================
File: live_react_examples/assets/react-components/delay-slider.tsx
================
import { DualRangeSlider } from "./ui/dual-range-slider";
import { Label } from "./ui/label";
import * as React from "react";
import { useState } from "react";

function formatMilliseconds(ms: number): string {
  const seconds = Math.floor(ms / 1000) % 60;
  const minutes = Math.floor(ms / (1000 * 60)) % 60;
  const hours = Math.floor(ms / (1000 * 60 * 60));

  const parts: string[] = [];
  if (hours > 0) parts.push(`${hours}h`);
  if (minutes > 0) parts.push(`${minutes}m`);
  if (seconds > 0 || parts.length === 0) parts.push(`${seconds}s`);

  return parts.join("");
}

type DelaySliderProps = {
  label: string;
  inputName: string;
  value: [number, number];
  min: number;
  max: number;
  step: number;
};

export const DelaySlider: React.FC<DelaySliderProps> = ({
  label,
  inputName,
  value,
  min,
  max,
  step,
}) => {
  const [values, setValues] = useState<[number, number]>(value);

  const handleValueChange = (newValues: number[]) => {
    if (newValues.length === 2) {
      setValues([newValues[0], newValues[1]]);
    }
  };

  return (
    <div className="w-full space-y-8">
      <Label>{label}</Label>
      <DualRangeSlider
        name={inputName}
        label={(value) => <span>{formatMilliseconds(value ?? 0)}</span>}
        value={values}
        onValueChange={handleValueChange}
        min={min}
        max={max}
        step={step}
      />
    </div>
  );
};

================
File: live_react_examples/assets/react-components/flash-sonner.jsx
================
import React, { useState } from "react";
import { Toaster, toast } from "sonner";

export function FlashSonner({ flash, pushEvent }) {
  if (flash.info) {
    toast.info(flash.info, {
      id: "info",
      duration: Infinity,
      richColors: true,
      closeButton: true,
      onDismiss: (t) => {
        pushEvent("lv:clear-flash", { key: "info" });
      },
    });
  }

  if (flash.error) {
    toast.error(flash.error, {
      id: "error",
      richColors: true,
      duration: Infinity,
      closeButton: true,
      onDismiss: (t) => {
        pushEvent("lv:clear-flash", { key: "error" });
      },
    });
  }

  return <Toaster />;
}

================
File: live_react_examples/assets/react-components/github-code.jsx
================
import React, { useEffect, useState } from "react";
import hljs from "highlight.js/lib/core";
import elixir from "highlight.js/lib/languages/elixir";
import erb from "highlight.js/lib/languages/erb";
import javascript from "highlight.js/lib/languages/javascript";
import typescript from "highlight.js/lib/languages/typescript";

import "highlight.js/styles/github.css";

hljs.registerLanguage("jsx", javascript);
hljs.registerLanguage("tsx", javascript);
hljs.registerLanguage("elixir", elixir);
hljs.registerLanguage("heex", erb);

export function GithubCode({ url, language }) {
  const [code, setCode] = useState("");

  useEffect(() => {
    const fetchCode = async () => {
      try {
        const response = await fetch(url);
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        let text = await response.text();
        text = text.trimEnd();
        const highlightedCode = hljs.highlight(text, { language }).value;
        setCode(highlightedCode);
      } catch (error) {
        console.error("Error fetching code:", error);
      }
    };

    fetchCode();
  }, []);

  return (
    <pre>
      <code dangerouslySetInnerHTML={{ __html: code }} />
    </pre>
  );
}

================
File: live_react_examples/assets/react-components/index.jsx
================
// polyfill recommended by Vite https://vitejs.dev/config/build-options#build-modulepreload
import "vite/modulepreload-polyfill";

import { Counter } from "./counter";
import { DelaySlider } from "./delay-slider";
import { FlashSonner } from "./flash-sonner";
import { GithubCode } from "./github-code";
import { Lazy } from "./lazy";
import { LogList } from "./log-list";
import { SSR } from "./ssr";
import { Simple } from "./simple";
import { SimpleProps } from "./simple-props";
import { Slot } from "./slot";
import { Typescript } from "./typescript";

export default {
  Counter,
  DelaySlider,
  FlashSonner,
  GithubCode,
  Lazy,
  LogList,
  SSR,
  Simple,
  SimpleProps,
  Slot,
  Typescript,
};

================
File: live_react_examples/assets/react-components/lazy.jsx
================
import React, { Suspense } from "react";
const LazyComponent = React.lazy(
  () => import("./components/lazy-component.jsx"),
);

export function Lazy() {
  return (
    <div>
      <h1>Hello, Vite with Code Splitting and Lazy Loading!</h1>
      <Suspense fallback={<div>Loading...</div>}>
        <LazyComponent />
      </Suspense>
    </div>
  );
}

================
File: live_react_examples/assets/react-components/log-list.jsx
================
import React, { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";

export function LogList({ pushEvent, handleEvent }) {
  const [items, setItems] = useState([]);
  const [showItems, setShowItems] = useState(true);
  const [body, setBody] = useState("");

  const addItem = (e) => {
    e.preventDefault();
    pushEvent("add_item", { body });
    setBody("");
  };

  const resetItems = () => setItems([]);

  useEffect(() => {
    handleEvent("new_item", (item) => {
      setItems((prevItems) => [item, ...prevItems]);
    });
  }, []);

  return (
    <div className="flex flex-col space-y-3">
      <label className="space-x-2">
        <input
          type="checkbox"
          checked={showItems}
          onChange={(e) => {
            setShowItems(!showItems);
          }}
        />
        <span>show list</span>
      </label>

      <div className="flex space-x-2">
        <form className="space-x-2">
          <input
            type="test"
            value={body}
            onChange={(e) => setBody(e.target.value)}
            className="border rounded px-2 py-1"
          />
          <button
            type="submit"
            className="bg-black rounded text-white px-2 py-1 font-bold"
            onClick={addItem}
          >
            Add item
          </button>
        </form>
        <button
          type="submit"
          className="bg-black rounded text-white px-2 py-1 font-bold"
          onClick={resetItems}
        >
          Reset items
        </button>
      </div>

      <div className="relative flex flex-col min-h-[400px] overflow-hidden">
        {showItems && (
          <AnimatePresence>
            {items.map((item) => (
              <motion.div
                key={item.id}
                initial={{ scale: 0, opacity: 0 }}
                animate={{ scale: 1, opacity: 1, originY: 0 }}
                exit={{ scale: 0, opacity: 0 }}
                transition={{ type: "spring", stiffness: 350, damping: 40 }}
                layout
              >
                <div className="min-h-fit transform transition-all duration-200 ease-in-out py-2 border-t border-[#eee]">
                  {item.id}: {item.body}
                </div>
              </motion.div>
            ))}
          </AnimatePresence>
        )}
      </div>
    </div>
  );
}

================
File: live_react_examples/assets/react-components/simple-props.jsx
================
import React from "react";

export function SimpleProps({ user }) {
  return (
    <div>
      An example of how to pass a struct to React:
      {JSON.stringify(user)}
    </div>
  );
}

================
File: live_react_examples/assets/react-components/simple.jsx
================
import React from "react";

export function Simple({}) {
  return <div>Hello world!</div>;
}

================
File: live_react_examples/assets/react-components/slot.tsx
================
import React from "react";

export function Slot({ children }: { children: React.ReactNode }) {
  return <div className="flex">{children}</div>;
}

================
File: live_react_examples/assets/react-components/ssr.jsx
================
import React from "react";

export function SSR({ text }) {
  return <div className="p-4 rounded-xl bg-card shadow">{text}</div>;
}

================
File: live_react_examples/assets/react-components/typescript.tsx
================
import React from "react";

function MyButton({ title }: { title: string }) {
  return (
    <button className="bg-indigo-500 py-2 px-3 rounded text-white">
      {title}
    </button>
  );
}

export function Typescript() {
  return (
    <div className="flex flex-col space-y-4">
      <h1>Typescript</h1>
      <div>
        <MyButton title="I'm a typed button" />
      </div>
    </div>
  );
}

================
File: live_react_examples/assets/package.json
================
{
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite --host",
    "tsc": "tsc",
    "build": "tsc && vite build",
    "build-server": "tsc && vite build --ssr js/server.js --out-dir ../priv/react-components --minify esbuild && echo '{\"type\": \"module\" } ' > ../priv/react-components/package.json"
  },
  "devDependencies": {
    "@tailwindcss/forms": "^0.5.7",
    "@types/react": "^18.3.11",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.19",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.12",
    "typescript": "^5.6.2",
    "vite": "^5.2.10"
  },
  "dependencies": {
    "@radix-ui/react-slider": "^1.2.1",
    "@radix-ui/react-label": "^2.1.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "framer-motion": "^11.2.11",
    "highlight.js": "^11.10.0",
    "live_react": "file:../..",
    "phoenix": "file:../deps/phoenix",
    "phoenix_html": "file:../deps/phoenix_html",
    "phoenix_live_view": "file:../deps/phoenix_live_view",
    "prism-react-renderer": "^2.4.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-syntax-highlighter": "^15.5.0",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.3.0",
    "topbar": "^2.0.2"
  }
}

================
File: live_react_examples/assets/postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

================
File: live_react_examples/assets/tailwind.config.js
================
// See the Tailwind configuration guide for advanced usage
// https://tailwindcss.com/docs/configuration

const plugin = require("tailwindcss/plugin");
const fs = require("fs");
const path = require("path");

module.exports = {
  content: [
    "./js/**/*.js",
    "./react-components/**/*.jsx",
    "./react-components/**/*.tsx",
    "../lib/live_react_examples_web.ex",
    "../lib/live_react_examples_web/**/*.*ex",
  ],
  theme: {
    extend: {
      animation: {
        "border-beam": "border-beam calc(var(--duration)*1s) infinite linear",
      },
      keyframes: {
        "border-beam": {
          "100%": {
            "offset-distance": "100%",
          },
        },
      },
      colors: {
        brand: "#FD4F00",
        background: "hsl(var(--background))",
        border: "hsl(var(--border))",
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        foreground: "hsl(var(--foreground))",
        input: "hsl(var(--input))",
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        ring: "hsl(var(--ring))",
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
      },
    },
  },
  plugins: [
    require("@tailwindcss/forms"),
    // Allows prefixing tailwind classes with LiveView classes to add rules
    // only when LiveView classes are applied, for example:
    //
    //     <div class="phx-click-loading:animate-ping">
    //
    plugin(({ addVariant }) =>
      addVariant("phx-click-loading", [
        ".phx-click-loading&",
        ".phx-click-loading &",
      ]),
    ),
    plugin(({ addVariant }) =>
      addVariant("phx-submit-loading", [
        ".phx-submit-loading&",
        ".phx-submit-loading &",
      ]),
    ),
    plugin(({ addVariant }) =>
      addVariant("phx-change-loading", [
        ".phx-change-loading&",
        ".phx-change-loading &",
      ]),
    ),

    // Embeds Heroicons (https://heroicons.com) into your app.css bundle
    // See your `CoreComponents.icon/1` for more information.
    //
    plugin(function ({ matchComponents, theme }) {
      let iconsDir = path.join(__dirname, "../deps/heroicons/optimized");
      let values = {};
      let icons = [
        ["", "/24/outline"],
        ["-solid", "/24/solid"],
        ["-mini", "/20/solid"],
        ["-micro", "/16/solid"],
      ];
      icons.forEach(([suffix, dir]) => {
        fs.readdirSync(path.join(iconsDir, dir)).forEach((file) => {
          let name = path.basename(file, ".svg") + suffix;
          values[name] = { name, fullPath: path.join(iconsDir, dir, file) };
        });
      });
      matchComponents(
        {
          hero: ({ name, fullPath }) => {
            let content = fs
              .readFileSync(fullPath)
              .toString()
              .replace(/\r?\n|\r/g, "");
            let size = theme("spacing.6");
            if (name.endsWith("-mini")) {
              size = theme("spacing.5");
            } else if (name.endsWith("-micro")) {
              size = theme("spacing.4");
            }
            return {
              [`--hero-${name}`]: `url('data:image/svg+xml;utf8,${content}')`,
              "-webkit-mask": `var(--hero-${name})`,
              mask: `var(--hero-${name})`,
              "mask-repeat": "no-repeat",
              "background-color": "currentColor",
              "vertical-align": "middle",
              display: "inline-block",
              width: size,
              height: size,
            };
          },
        },
        { values },
      );
    }),
  ],
};

================
File: live_react_examples/assets/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["dom", "dom.iterable", "ES2020"],
    "allowJs": true,
    "skipLibCheck": true,
    "types": ["vite/client"],
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "esnext",
    "moduleResolution": "node",
    "isolatedModules": true,
    "resolveJsonModule": true,
    "noEmit": true,
    "jsx": "react",
    "sourceMap": true,
    "declaration": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "incremental": true,
    "noFallthroughCasesInSwitch": true,

    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["js/*", "react/**/*"]
}

================
File: live_react_examples/assets/vite.config.js
================
import path from "path";
import { defineConfig } from "vite";

import react from "@vitejs/plugin-react";
import liveReactPlugin from "live_react/vite-plugin";

// https://vitejs.dev/config/
export default defineConfig(({ command }) => {
  const isDev = command !== "build";

  return {
    base: isDev ? undefined : "/assets",
    publicDir: "static",
    plugins: [react(), liveReactPlugin()],
    ssr: {
      // we need it, because in SSR build we want no external
      // and in dev, we want external for fast updates
      noExternal: isDev ? undefined : true,
    },
    resolve: {
      alias: {
        "@": path.resolve(__dirname, "."),
      },
    },
    optimizeDeps: {
      // these packages are loaded as file:../deps/<name> imports
      // so they're not optimized for development by vite by default
      // we want to enable it for better DX
      // more https://vitejs.dev/guide/dep-pre-bundling#monorepos-and-linked-dependencies
      include: ["live_react", "phoenix", "phoenix_html", "phoenix_live_view"],
    },
    build: {
      commonjsOptions: { transformMixedEsModules: true },
      target: "es2020",
      outDir: "../priv/static/assets", // emit assets to priv/static/assets
      emptyOutDir: true,
      sourcemap: isDev, // enable source map in dev build
      // manifest: false, // do not generate manifest.json
      rollupOptions: {
        input: {
          app: path.resolve(__dirname, "./js/app.js"),
        },
        output: {
          // remove hashes to match phoenix way of handling asssets
          entryFileNames: "[name].js",
          chunkFileNames: "[name].js",
          assetFileNames: "[name][extname]",
        },
      },
    },
  };
});

================
File: live_react_examples/config/config.exs
================
# This file is responsible for configuring your application
# and its dependencies with the aid of the Config module.
#
# This configuration file is loaded before any dependency and
# is restricted to this project.

# General application configuration
import Config

config :live_react,
  ssr_module: LiveReact.SSR.NodeJS

config :live_react_examples,
  generators: [timestamp_type: :utc_datetime]

# Configures the endpoint
config :live_react_examples, LiveReactExamplesWeb.Endpoint,
  url: [host: "localhost"],
  adapter: Bandit.PhoenixAdapter,
  render_errors: [
    formats: [html: LiveReactExamplesWeb.ErrorHTML, json: LiveReactExamplesWeb.ErrorJSON],
    layout: false
  ],
  pubsub_server: LiveReactExamples.PubSub,
  live_view: [signing_salt: "vR6Y0p5z"]

# Configures Elixir's Logger
config :logger, :console,
  format: "$time $metadata[$level] $message\n",
  metadata: [:request_id]

# Use Jason for JSON parsing in Phoenix
config :phoenix, :json_library, Jason

# Import environment specific config. This must remain at the bottom
# of this file so it overrides the configuration defined above.
import_config "#{config_env()}.exs"

================
File: live_react_examples/config/dev.exs
================
import Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :live_react_examples, LiveReactExamplesWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {127, 0, 0, 1}, port: 4000],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "zvJnWbYbr/b5+CzCCcin8jP0cIVLqXs6/vt2WiC5d/nVE8npISnhItLe1AIAP7Vn",
  watchers: [
    npm: ["run", "dev", cd: Path.expand("../assets", __DIR__)]
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :live_react_examples, LiveReactExamplesWeb.Endpoint,
  reloadable_appps: [:live_react, :live_react_examples_web, :live_react_examples],
  live_reload: [
    notify: [
      live_views: [
        ~r"lib/live_react_examples_web/core_components.ex$",
        ~r"lib/live_react_examples_web/(live|components)/.*(ex|heex)$"
      ]
    ],
    patterns: [
      ~r"priv/static/(?!uploads/).*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"lib/live_react_examples_web/(controllers|live|components)/.*(ex|heex)$"
    ]
  ]

config :live_react,
  vite_host: "http://localhost:5173",
  ssr_module: LiveReact.SSR.ViteJS,
  ssr: true

# Enable dev routes for dashboard and mailbox
config :live_react_examples, dev_routes: true

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

config :phoenix_live_view,
  # Include HEEx debug annotations as HTML comments in rendered markup
  debug_heex_annotations: true,
  # Enable helpful, but potentially expensive runtime checks
  enable_expensive_runtime_checks: true

================
File: live_react_examples/config/prod.exs
================
import Config

# Note we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the `mix assets.deploy` task,
# which you should run after static files are built and
# before starting your production server.
config :live_react_examples, LiveReactExamplesWeb.Endpoint,
  cache_static_manifest: "priv/static/cache_manifest.json"

# Do not print debug messages in production
config :logger, level: :info

config :live_react,
  ssr_module: LiveReact.SSR.NodeJS,
  ssr: true

# Runtime production configuration, including reading
# of environment variables, is done on config/runtime.exs.

================
File: live_react_examples/config/runtime.exs
================
import Config

# config/runtime.exs is executed for all environments, including
# during releases. It is executed after compilation and before the
# system starts, so it is typically used to load production configuration
# and secrets from environment variables or elsewhere. Do not define
# any compile-time configuration in here, as it won't be applied.
# The block below contains prod specific runtime configuration.

# ## Using releases
#
# If you use `mix release`, you need to explicitly enable the server
# by passing the PHX_SERVER=true when you start it:
#
#     PHX_SERVER=true bin/live_react_examples start
#
# Alternatively, you can use `mix phx.gen.release` to generate a `bin/server`
# script that automatically sets the env var above.
if System.get_env("PHX_SERVER") do
  config :live_react_examples, LiveReactExamplesWeb.Endpoint, server: true
end

if config_env() == :prod do
  # The secret key base is used to sign/encrypt cookies and other secrets.
  # A default value is used in config/dev.exs and config/test.exs but you
  # want to use a different value for prod and you most likely don't want
  # to check this value into version control, so we use an environment
  # variable instead.
  secret_key_base =
    System.get_env("SECRET_KEY_BASE") ||
      raise """
      environment variable SECRET_KEY_BASE is missing.
      You can generate one by calling: mix phx.gen.secret
      """

  host = System.get_env("PHX_HOST") || "example.com"
  port = String.to_integer(System.get_env("PORT") || "4000")

  config :live_react_examples, :dns_cluster_query, System.get_env("DNS_CLUSTER_QUERY")

  config :live_react_examples, LiveReactExamplesWeb.Endpoint,
    url: [host: host, port: 443, scheme: "https"],
    http: [
      # Enable IPv6 and bind on all interfaces.
      # Set it to  {0, 0, 0, 0, 0, 0, 0, 1} for local network only access.
      # See the documentation on https://hexdocs.pm/bandit/Bandit.html#t:options/0
      # for details about using IPv6 vs IPv4 and loopback vs public addresses.
      ip: {0, 0, 0, 0, 0, 0, 0, 0},
      port: port
    ],
    secret_key_base: secret_key_base

  # ## SSL Support
  #
  # To get SSL working, you will need to add the `https` key
  # to your endpoint configuration:
  #
  #     config :live_react_examples, LiveReactExamplesWeb.Endpoint,
  #       https: [
  #         ...,
  #         port: 443,
  #         cipher_suite: :strong,
  #         keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
  #         certfile: System.get_env("SOME_APP_SSL_CERT_PATH")
  #       ]
  #
  # The `cipher_suite` is set to `:strong` to support only the
  # latest and more secure SSL ciphers. This means old browsers
  # and clients may not be supported. You can set it to
  # `:compatible` for wider support.
  #
  # `:keyfile` and `:certfile` expect an absolute path to the key
  # and cert in disk or a relative path inside priv, for example
  # "priv/ssl/server.key". For all supported SSL configuration
  # options, see https://hexdocs.pm/plug/Plug.SSL.html#configure/1
  #
  # We also recommend setting `force_ssl` in your config/prod.exs,
  # ensuring no data is ever sent via http, always redirecting to https:
  #
  #     config :live_react_examples, LiveReactExamplesWeb.Endpoint,
  #       force_ssl: [hsts: true]
  #
  # Check `Plug.SSL` for all available options in `force_ssl`.
end

================
File: live_react_examples/config/test.exs
================
import Config

# We don't run a server during test. If one is required,
# you can enable the server option below.
config :live_react_examples, LiveReactExamplesWeb.Endpoint,
  http: [ip: {127, 0, 0, 1}, port: 4002],
  secret_key_base: "1TSUMeDi3xh+wePzvzKMq73p/bD2psOzg340hjtEcR8WGPxm0qINVteU03whCTcS",
  server: false

# Print only warnings and errors during test
config :logger, level: :warning

# Initialize plugs at runtime for faster test compilation
config :phoenix, :plug_init_mode, :runtime

# Enable helpful, but potentially expensive runtime checks
config :phoenix_live_view,
  enable_expensive_runtime_checks: true

================
File: live_react_examples/lib/live_react_examples/application.ex
================
defmodule LiveReactExamples.Application do
  # See https://hexdocs.pm/elixir/Application.html
  # for more information on OTP Applications
  @moduledoc false

  use Application

  @impl true
  def start(_type, _args) do
    children = [
      {NodeJS.Supervisor, [path: LiveReact.SSR.NodeJS.server_path(), pool_size: 1]},
      LiveReactExamplesWeb.Telemetry,
      {DNSCluster,
       query: Application.get_env(:live_react_examples, :dns_cluster_query) || :ignore},
      {Phoenix.PubSub, name: LiveReactExamples.PubSub},
      # Start a worker by calling: LiveReactExamples.Worker.start_link(arg)
      # {LiveReactExamples.Worker, arg},
      # Start to serve requests, typically the last entry
      LiveReactExamplesWeb.Endpoint
    ]

    # Set up LiveReactExamples.Telemetry
    LiveReactExamples.Telemetry.setup()

    # See https://hexdocs.pm/elixir/Supervisor.html
    # for other strategies and supported options
    opts = [strategy: :one_for_one, name: LiveReactExamples.Supervisor]
    Supervisor.start_link(children, opts)
  end

  # Tell Phoenix to update the endpoint configuration
  # whenever the application is updated.
  @impl true
  def config_change(changed, _new, removed) do
    LiveReactExamplesWeb.Endpoint.config_change(changed, removed)
    :ok
  end
end

================
File: live_react_examples/lib/live_react_examples/telemetry.ex
================
defmodule LiveReactExamples.Telemetry do
  require Logger

  def setup() do
    :ok =
      :telemetry.attach(
        "live-react-ssr-logger",
        [:live_react, :ssr, :stop],
        &LiveReactExamples.Telemetry.handle_event/4,
        nil
      )
  end

  def handle_event([:live_react, :ssr, :stop], %{duration: duration}, metadata, _config) do
    duration_ms = System.convert_time_unit(duration, :native, :microsecond)
    Logger.info("SSR completed for component: #{metadata.component} in #{duration_ms}µs")
  end
end

================
File: live_react_examples/lib/live_react_examples_web/components/layouts/app.html.heex
================
<header class="overflow-hidden h-14 sticky top-0 z-50 border-b w-full flex items-center backdrop-blur rounded">
  <.border_beam size={100} duration={10} />
  <div class="flex-1 flex max-w-screen-2xl justify-between px-8">
    <div class="flex items-center gap-4">
      <a href="/">
        <img src={~p"/images/logo.svg"} class="w-32" />
      </a>
      <p class="bg-brand/5 text-brand rounded-full px-2 font-medium leading-6">
        LiveReact examples
      </p>
    </div>
    <div>
      <.a class="flex space-x-2 items-center" href="https://github.com/mrdotb/live_react">
        <span>View on Github</span>
        <div>
          <img src="https://img.shields.io/github/stars/mrdotb/live_react?logo=github&logoColor=000000&label=Star&color=fafafa&style=social" />
        </div>
      </.a>
    </div>
  </div>
</header>

<main class="flex-1">
  <div class="px-8 flex-1 items-start md:grid md:grid-cols-[220px_minmax(0,1fr)] md:gap-6 lg:grid-cols-[240px_minmax(0,1fr)] lg:gap-10">
    <aside class="fixed top-14 z-30 -ml-2 hidden h-[calc(100vh-3.5rem)] w-full shrink-0 md:sticky md:block">
      <div class="relative overflow-hidden h-full py-6 pr-6 lg:py-8">
        <div class="h-full w-full rounded-[inherit]">
          <nav>
            <div class="pb-4">
              <h4 class="mb-1 rounded-md px-2 py-1 text-sm font-semibold">Dead Views 💀</h4>
              <div class="grid grid-flow-row auto-rows-max text-sm">
                <.link
                  class="group flex w-full items-center rounded-md border border-transparent px-2 py-1 hover:underline font-medium text-zinc-700"
                  href={~p"/simple"}
                >
                  Simple
                </.link>
                <.link
                  class="group flex w-full items-center rounded-md border border-transparent px-2 py-1 hover:underline font-medium text-zinc-700"
                  href={~p"/simple-props"}
                >
                  Simple Props
                </.link>
                <.link
                  class="group flex w-full items-center rounded-md border border-transparent px-2 py-1 hover:underline font-medium text-zinc-700"
                  href={~p"/typescript"}
                >
                  TypeScript
                </.link>
                <.link
                  class="group flex w-full items-center rounded-md border border-transparent px-2 py-1 hover:underline font-medium text-zinc-700"
                  href={~p"/lazy"}
                >
                  Lazy
                </.link>
              </div>
            </div>

            <div>
              <h4 class="mb-1 rounded-md px-2 py-1 text-sm font-semibold">LiveViews 🔄</h4>
              <div class="grid grid-flow-row auto-rows-max text-sm">
                <.link
                  class="group flex w-full items-center rounded-md border border-transparent px-2 py-1 hover:underline font-medium text-zinc-700"
                  navigate={~p"/live-counter"}
                >
                  Live Counter
                </.link>
                <.link
                  class="group flex w-full items-center rounded-md border border-transparent px-2 py-1 hover:underline font-medium text-zinc-700"
                  navigate={~p"/log-list"}
                >
                  Log List
                </.link>
                <.link
                  class="group flex w-full items-center rounded-md border border-transparent px-2 py-1 hover:underline font-medium text-zinc-700"
                  navigate={~p"/flash-sonner"}
                >
                  Flash with sonner
                </.link>
                <.link
                  class="group flex w-full items-center rounded-md border border-transparent px-2 py-1 hover:underline font-medium text-zinc-700"
                  navigate={~p"/ssr"}
                >
                  SSR
                </.link>
                <.link
                  class="group flex w-full items-center rounded-md border border-transparent px-2 py-1 hover:underline font-medium text-zinc-700"
                  navigate={~p"/hybrid-form"}
                >
                  Hybrid Form
                </.link>
                <.link
                  class="group flex w-full items-center rounded-md border border-transparent px-2 py-1 hover:underline font-medium text-zinc-700"
                  navigate={~p"/slot"}
                >
                  Slot
                </.link>
              </div>
            </div>
          </nav>
        </div>
      </div>
    </aside>
    <main class="relative py-6 lg:gap-10 lg:py-8 xl:grid xl:grid-cols-[1fr_300px]">
      <div class="mx-auto w-full min-w-0">
        <.demo {LiveReactExamples.demo(@demo)}>
          {@inner_content}
        </.demo>
      </div>
    </main>
  </div>
</main>
<.react :if={@demo == :flash_sonner} name="FlashSonner" flash={@flash} socket={assigns[:socket]} />
<.flash_group flash={@flash} />

================
File: live_react_examples/lib/live_react_examples_web/components/layouts/root.html.heex
================
<!DOCTYPE html>
<html lang="en" class="[scrollbar-gutter:stable]">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="csrf-token" content={get_csrf_token()} />
    <.live_title suffix=" · Phoenix Framework">
      {assigns[:page_title] || "LiveReactExamples"}
    </.live_title>
    <LiveReact.Reload.vite_assets assets={["/js/app.js", "/css/app.css"]}>
      <link phx-track-static rel="stylesheet" href={~p"/assets/app.css"} />
      <script type="module" phx-track-static type="text/javascript" src={~p"/assets/app.js"}>
      </script>
    </LiveReact.Reload.vite_assets>
  </head>
  <body class="min-h-screen bg-background font-sans antialiased">
    {@inner_content}
  </body>
</html>

================
File: live_react_examples/lib/live_react_examples_web/components/core_components.ex
================
defmodule LiveReactExamplesWeb.CoreComponents do
  @moduledoc """
  Provides core UI components.

  At first glance, this module may seem daunting, but its goal is to provide
  core building blocks for your application, such as modals, tables, and
  forms. The components consist mostly of markup and are well-documented
  with doc strings and declarative assigns. You may customize and style
  them in any way you want, based on your application growth and needs.

  The default components use Tailwind CSS, a utility-first CSS framework.
  See the [Tailwind CSS documentation](https://tailwindcss.com) to learn
  how to customize them or feel free to swap in another framework altogether.

  Icons are provided by [heroicons](https://heroicons.com). See `icon/1` for usage.
  """
  use Phoenix.Component

  alias Phoenix.LiveView.JS

  @doc """
  Renders a modal.

  ## Examples

      <.modal id="confirm-modal">
        This is a modal.
      </.modal>

  JS commands may be passed to the `:on_cancel` to configure
  the closing/cancel event, for example:

      <.modal id="confirm" on_cancel={JS.navigate(~p"/posts")}>
        This is another modal.
      </.modal>

  """
  attr :id, :string, required: true
  attr :show, :boolean, default: false
  attr :on_cancel, JS, default: %JS{}
  slot :inner_block, required: true

  def modal(assigns) do
    ~H"""
    <div
      id={@id}
      phx-mounted={@show && show_modal(@id)}
      phx-remove={hide_modal(@id)}
      data-cancel={JS.exec(@on_cancel, "phx-remove")}
      class="relative z-50 hidden"
    >
      <div id={"#{@id}-bg"} class="bg-zinc-50/90 fixed inset-0 transition-opacity" aria-hidden="true" />
      <div
        class="fixed inset-0 overflow-y-auto"
        aria-labelledby={"#{@id}-title"}
        aria-describedby={"#{@id}-description"}
        role="dialog"
        aria-modal="true"
        tabindex="0"
      >
        <div class="flex min-h-full items-center justify-center">
          <div class="w-full max-w-3xl p-4 sm:p-6 lg:py-8">
            <.focus_wrap
              id={"#{@id}-container"}
              phx-window-keydown={JS.exec("data-cancel", to: "##{@id}")}
              phx-key="escape"
              phx-click-away={JS.exec("data-cancel", to: "##{@id}")}
              class="shadow-zinc-700/10 ring-zinc-700/10 relative hidden rounded-2xl bg-white p-14 shadow-lg ring-1 transition"
            >
              <div class="absolute top-6 right-5">
                <button
                  phx-click={JS.exec("data-cancel", to: "##{@id}")}
                  type="button"
                  class="-m-3 flex-none p-3 opacity-20 hover:opacity-40"
                  aria-label="close"
                >
                  <.icon name="hero-x-mark-solid" class="h-5 w-5" />
                </button>
              </div>
              <div id={"#{@id}-content"}>
                {render_slot(@inner_block)}
              </div>
            </.focus_wrap>
          </div>
        </div>
      </div>
    </div>
    """
  end

  @doc """
  Renders flash notices.

  ## Examples

      <.flash kind={:info} flash={@flash} />
      <.flash kind={:info} phx-mounted={show("#flash")}>Welcome Back!</.flash>
  """
  attr :id, :string, doc: "the optional id of flash container"
  attr :flash, :map, default: %{}, doc: "the map of flash messages to display"
  attr :title, :string, default: nil
  attr :kind, :atom, values: [:info, :error], doc: "used for styling and flash lookup"
  attr :rest, :global, doc: "the arbitrary HTML attributes to add to the flash container"

  slot :inner_block, doc: "the optional inner block that renders the flash message"

  def flash(assigns) do
    assigns = assign_new(assigns, :id, fn -> "flash-#{assigns.kind}" end)

    ~H"""
    <div
      :if={msg = render_slot(@inner_block) || Phoenix.Flash.get(@flash, @kind)}
      id={@id}
      phx-click={JS.push("lv:clear-flash", value: %{key: @kind}) |> hide("##{@id}")}
      role="alert"
      class={[
        "fixed top-2 right-2 mr-2 w-80 sm:w-96 z-50 rounded-lg p-3 ring-1",
        @kind == :info && "bg-emerald-50 text-emerald-800 ring-emerald-500 fill-cyan-900",
        @kind == :error && "bg-rose-50 text-rose-900 shadow-md ring-rose-500 fill-rose-900"
      ]}
      {@rest}
    >
      <p :if={@title} class="flex items-center gap-1.5 text-sm font-semibold leading-6">
        <.icon :if={@kind == :info} name="hero-information-circle-mini" class="h-4 w-4" />
        <.icon :if={@kind == :error} name="hero-exclamation-circle-mini" class="h-4 w-4" />
        {@title}
      </p>
      <p class="mt-2 text-sm leading-5">{msg}</p>
      <button type="button" class="group absolute top-1 right-1 p-2" aria-label="close">
        <.icon name="hero-x-mark-solid" class="h-5 w-5 opacity-40 group-hover:opacity-70" />
      </button>
    </div>
    """
  end

  @doc """
  Shows the flash group with standard titles and content.

  ## Examples

      <.flash_group flash={@flash} />
  """
  attr :flash, :map, required: true, doc: "the map of flash messages"
  attr :id, :string, default: "flash-group", doc: "the optional id of flash container"

  def flash_group(assigns) do
    ~H"""
    <div id={@id}>
      <.flash kind={:info} title="Success!" flash={@flash} />
      <.flash kind={:error} title="Error!" flash={@flash} />
      <.flash
        id="client-error"
        kind={:error}
        title="We can't find the internet"
        phx-disconnected={show(".phx-client-error #client-error")}
        phx-connected={hide("#client-error")}
        hidden
      >
        Attempting to reconnect <.icon name="hero-arrow-path" class="ml-1 h-3 w-3 animate-spin" />
      </.flash>

      <.flash
        id="server-error"
        kind={:error}
        title="Something went wrong!"
        phx-disconnected={show(".phx-server-error #server-error")}
        phx-connected={hide("#server-error")}
        hidden
      >
        Hang in there while we get back on track
        <.icon name="hero-arrow-path" class="ml-1 h-3 w-3 animate-spin" />
      </.flash>
    </div>
    """
  end

  @doc """
  Renders a simple form.

  ## Examples

      <.simple_form for={@form} phx-change="validate" phx-submit="save">
        <.input field={@form[:email]} label="Email"/>
        <.input field={@form[:username]} label="Username" />
        <:actions>
          <.button>Save</.button>
        </:actions>
      </.simple_form>
  """
  attr :for, :any, required: true, doc: "the data structure for the form"
  attr :as, :any, default: nil, doc: "the server side parameter to collect all input under"

  attr :rest, :global,
    include: ~w(autocomplete name rel action enctype method novalidate target multipart),
    doc: "the arbitrary HTML attributes to apply to the form tag"

  slot :inner_block, required: true
  slot :actions, doc: "the slot for form actions, such as a submit button"

  def simple_form(assigns) do
    ~H"""
    <.form :let={f} for={@for} as={@as} {@rest}>
      <div class="mt-10 space-y-8 bg-white">
        {render_slot(@inner_block, f)}
        <div :for={action <- @actions} class="mt-2 flex items-center justify-between gap-6">
          {render_slot(action, f)}
        </div>
      </div>
    </.form>
    """
  end

  @doc """
  Renders a button.

  ## Examples

      <.button>Send!</.button>
      <.button phx-click="go" class="ml-2">Send!</.button>
  """
  attr :type, :string, default: nil
  attr :class, :string, default: nil
  attr :rest, :global, include: ~w(disabled form name value)

  slot :inner_block, required: true

  def button(assigns) do
    ~H"""
    <button
      type={@type}
      class={[
        "phx-submit-loading:opacity-75 rounded-lg bg-zinc-900 hover:bg-zinc-700 py-2 px-3",
        "text-sm font-semibold leading-6 text-white active:text-white/80",
        @class
      ]}
      {@rest}
    >
      {render_slot(@inner_block)}
    </button>
    """
  end

  attr :class, :string, default: nil

  attr :rest, :global,
    include: ~w(navigate patch href replace method csrf_token),
    doc: "the attributes to link"

  slot :inner_block, required: true

  def a(assigns) do
    ~H"""
    <a
      class={[
        "phx-submit-loading:opacity-75 rounded-lg bg-zinc-900 hover:bg-zinc-700 py-2 px-3",
        "text-sm font-semibold leading-6 text-white active:text-white/80",
        @class
      ]}
      {@rest}
    >
      {render_slot(@inner_block)}
    </a>
    """
  end

  @doc """
  Renders an input with label and error messages.

  A `Phoenix.HTML.FormField` may be passed as argument,
  which is used to retrieve the input name, id, and values.
  Otherwise all attributes may be passed explicitly.

  ## Types

  This function accepts all HTML input types, considering that:

    * You may also set `type="select"` to render a `<select>` tag

    * `type="checkbox"` is used exclusively to render boolean values

    * For live file uploads, see `Phoenix.Component.live_file_input/1`

  See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input
  for more information. Unsupported types, such as hidden and radio,
  are best written directly in your templates.

  ## Examples

      <.input field={@form[:email]} type="email" />
      <.input name="my-input" errors={["oh no!"]} />
  """
  attr :id, :any, default: nil
  attr :name, :any
  attr :label, :string, default: nil
  attr :value, :any

  attr :type, :string,
    default: "text",
    values: ~w(checkbox color date datetime-local email file month number password
               range search select tel text textarea time url week)

  attr :field, Phoenix.HTML.FormField,
    doc: "a form field struct retrieved from the form, for example: @form[:email]"

  attr :errors, :list, default: []
  attr :checked, :boolean, doc: "the checked flag for checkbox inputs"
  attr :prompt, :string, default: nil, doc: "the prompt for select inputs"
  attr :options, :list, doc: "the options to pass to Phoenix.HTML.Form.options_for_select/2"
  attr :multiple, :boolean, default: false, doc: "the multiple flag for select inputs"

  attr :rest, :global,
    include: ~w(accept autocomplete capture cols disabled form list max maxlength min minlength
                multiple pattern placeholder readonly required rows size step)

  def input(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []

    assigns
    |> assign(field: nil, id: assigns.id || field.id)
    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
    |> assign_new(:name, fn -> if assigns.multiple, do: field.name <> "[]", else: field.name end)
    |> assign_new(:value, fn -> field.value end)
    |> input()
  end

  def input(%{type: "checkbox"} = assigns) do
    assigns =
      assign_new(assigns, :checked, fn ->
        Phoenix.HTML.Form.normalize_value("checkbox", assigns[:value])
      end)

    ~H"""
    <div>
      <label class="flex items-center gap-4 text-sm leading-6 text-zinc-600">
        <input type="hidden" name={@name} value="false" disabled={@rest[:disabled]} />
        <input
          type="checkbox"
          id={@id}
          name={@name}
          value="true"
          checked={@checked}
          class="rounded border-zinc-300 text-zinc-900 focus:ring-0"
          {@rest}
        />
        {@label}
      </label>
      <.error :for={msg <- @errors}>{msg}</.error>
    </div>
    """
  end

  def input(%{type: "select"} = assigns) do
    ~H"""
    <div>
      <.label for={@id}>{@label}</.label>
      <select
        id={@id}
        name={@name}
        class="mt-2 block w-full rounded-md border border-gray-300 bg-white shadow-sm focus:border-zinc-400 focus:ring-0 sm:text-sm"
        multiple={@multiple}
        {@rest}
      >
        <option :if={@prompt} value="">{@prompt}</option>
        {Phoenix.HTML.Form.options_for_select(@options, @value)}
      </select>
      <.error :for={msg <- @errors}>{msg}</.error>
    </div>
    """
  end

  def input(%{type: "textarea"} = assigns) do
    ~H"""
    <div>
      <.label for={@id}>{@label}</.label>
      <textarea
        id={@id}
        name={@name}
        class={[
          "mt-2 block w-full rounded-lg text-zinc-900 focus:ring-0 sm:text-sm sm:leading-6 min-h-[6rem]",
          @errors == [] && "border-zinc-300 focus:border-zinc-400",
          @errors != [] && "border-rose-400 focus:border-rose-400"
        ]}
        {@rest}
      ><%= Phoenix.HTML.Form.normalize_value("textarea", @value) %></textarea>
      <.error :for={msg <- @errors}>{msg}</.error>
    </div>
    """
  end

  # All other inputs text, datetime-local, url, password, etc. are handled here...
  def input(assigns) do
    ~H"""
    <div>
      <.label for={@id}>{@label}</.label>
      <input
        type={@type}
        name={@name}
        id={@id}
        value={Phoenix.HTML.Form.normalize_value(@type, @value)}
        class={[
          "mt-2 block w-full rounded-lg text-zinc-900 focus:ring-0 sm:text-sm sm:leading-6",
          @errors == [] && "border-zinc-300 focus:border-zinc-400",
          @errors != [] && "border-rose-400 focus:border-rose-400"
        ]}
        {@rest}
      />
      <.error :for={msg <- @errors}>{msg}</.error>
    </div>
    """
  end

  @doc """
  Renders a label.
  """
  attr :for, :string, default: nil
  slot :inner_block, required: true

  def label(assigns) do
    ~H"""
    <label for={@for} class="block text-sm font-semibold leading-6 text-zinc-800">
      {render_slot(@inner_block)}
    </label>
    """
  end

  @doc """
  Generates a generic error message.
  """
  slot :inner_block, required: true

  def error(assigns) do
    ~H"""
    <p class="mt-3 flex gap-3 text-sm leading-6 text-rose-600">
      <.icon name="hero-exclamation-circle-mini" class="mt-0.5 h-5 w-5 flex-none" />
      {render_slot(@inner_block)}
    </p>
    """
  end

  @doc """
  Renders a header with title.
  """
  attr :class, :string, default: nil

  slot :inner_block, required: true
  slot :subtitle
  slot :actions

  def header(assigns) do
    ~H"""
    <header class={[@actions != [] && "flex items-center justify-between gap-6", @class]}>
      <div>
        <h1 class="text-lg font-semibold leading-8 text-zinc-800">
          {render_slot(@inner_block)}
        </h1>
        <p :if={@subtitle != []} class="mt-2 text-sm leading-6 text-zinc-600">
          {render_slot(@subtitle)}
        </p>
      </div>
      <div class="flex-none">{render_slot(@actions)}</div>
    </header>
    """
  end

  @doc ~S"""
  Renders a table with generic styling.

  ## Examples

      <.table id="users" rows={@users}>
        <:col :let={user} label="id"><%= user.id %></:col>
        <:col :let={user} label="username"><%= user.username %></:col>
      </.table>
  """
  attr :id, :string, required: true
  attr :rows, :list, required: true
  attr :row_id, :any, default: nil, doc: "the function for generating the row id"
  attr :row_click, :any, default: nil, doc: "the function for handling phx-click on each row"

  attr :row_item, :any,
    default: &Function.identity/1,
    doc: "the function for mapping each row before calling the :col and :action slots"

  slot :col, required: true do
    attr :label, :string
  end

  slot :action, doc: "the slot for showing user actions in the last table column"

  def table(assigns) do
    assigns =
      with %{rows: %Phoenix.LiveView.LiveStream{}} <- assigns do
        assign(assigns, row_id: assigns.row_id || fn {id, _item} -> id end)
      end

    ~H"""
    <div class="overflow-y-auto px-4 sm:overflow-visible sm:px-0">
      <table class="w-[40rem] mt-11 sm:w-full">
        <thead class="text-sm text-left leading-6 text-zinc-500">
          <tr>
            <th :for={col <- @col} class="p-0 pb-4 pr-6 font-normal">{col[:label]}</th>
            <th :if={@action != []} class="relative p-0 pb-4">
              <span class="sr-only">Actions</span>
            </th>
          </tr>
        </thead>
        <tbody
          id={@id}
          phx-update={match?(%Phoenix.LiveView.LiveStream{}, @rows) && "stream"}
          class="relative divide-y divide-zinc-100 border-t border-zinc-200 text-sm leading-6 text-zinc-700"
        >
          <tr :for={row <- @rows} id={@row_id && @row_id.(row)} class="group hover:bg-zinc-50">
            <td
              :for={{col, i} <- Enum.with_index(@col)}
              phx-click={@row_click && @row_click.(row)}
              class={["relative p-0", @row_click && "hover:cursor-pointer"]}
            >
              <div class="block py-4 pr-6">
                <span class="absolute -inset-y-px right-0 -left-4 group-hover:bg-zinc-50 sm:rounded-l-xl" />
                <span class={["relative", i == 0 && "font-semibold text-zinc-900"]}>
                  {render_slot(col, @row_item.(row))}
                </span>
              </div>
            </td>
            <td :if={@action != []} class="relative w-14 p-0">
              <div class="relative whitespace-nowrap py-4 text-right text-sm font-medium">
                <span class="absolute -inset-y-px -right-4 left-0 group-hover:bg-zinc-50 sm:rounded-r-xl" />
                <span
                  :for={action <- @action}
                  class="relative ml-4 font-semibold leading-6 text-zinc-900 hover:text-zinc-700"
                >
                  {render_slot(action, @row_item.(row))}
                </span>
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    """
  end

  @doc """
  Renders a data list.

  ## Examples

      <.list>
        <:item title="Title"><%= @post.title %></:item>
        <:item title="Views"><%= @post.views %></:item>
      </.list>
  """
  slot :item, required: true do
    attr :title, :string, required: true
  end

  def list(assigns) do
    ~H"""
    <div class="mt-14">
      <dl class="-my-4 divide-y divide-zinc-100">
        <div :for={item <- @item} class="flex gap-4 py-4 text-sm leading-6 sm:gap-8">
          <dt class="w-1/4 flex-none text-zinc-500">{item.title}</dt>
          <dd class="text-zinc-700">{render_slot(item)}</dd>
        </div>
      </dl>
    </div>
    """
  end

  @doc """
  Renders a back navigation link.

  ## Examples

      <.back navigate={~p"/posts"}>Back to posts</.back>
  """
  attr :navigate, :any, required: true
  slot :inner_block, required: true

  def back(assigns) do
    ~H"""
    <div class="mt-16">
      <.link
        navigate={@navigate}
        class="text-sm font-semibold leading-6 text-zinc-900 hover:text-zinc-700"
      >
        <.icon name="hero-arrow-left-solid" class="h-3 w-3" />
        {render_slot(@inner_block)}
      </.link>
    </div>
    """
  end

  @doc """
  Renders a [Heroicon](https://heroicons.com).

  Heroicons come in three styles – outline, solid, and mini.
  By default, the outline style is used, but solid and mini may
  be applied by using the `-solid` and `-mini` suffix.

  You can customize the size and colors of the icons by setting
  width, height, and background color classes.

  Icons are extracted from the `deps/heroicons` directory and bundled within
  your compiled app.css by the plugin in your `assets/tailwind.config.js`.

  ## Examples

      <.icon name="hero-x-mark-solid" />
      <.icon name="hero-arrow-path" class="ml-1 w-3 h-3 animate-spin" />
  """
  attr :name, :string, required: true
  attr :class, :string, default: nil

  def icon(%{name: "hero-" <> _} = assigns) do
    ~H"""
    <span class={[@name, @class]} />
    """
  end

  ## JS Commands

  def show(js \\ %JS{}, selector) do
    JS.show(js,
      to: selector,
      time: 300,
      transition:
        {"transition-all transform ease-out duration-300",
         "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95",
         "opacity-100 translate-y-0 sm:scale-100"}
    )
  end

  def hide(js \\ %JS{}, selector) do
    JS.hide(js,
      to: selector,
      time: 200,
      transition:
        {"transition-all transform ease-in duration-200",
         "opacity-100 translate-y-0 sm:scale-100",
         "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"}
    )
  end

  def show_modal(js \\ %JS{}, id) when is_binary(id) do
    js
    |> JS.show(to: "##{id}")
    |> JS.show(
      to: "##{id}-bg",
      time: 300,
      transition: {"transition-all transform ease-out duration-300", "opacity-0", "opacity-100"}
    )
    |> show("##{id}-container")
    |> JS.add_class("overflow-hidden", to: "body")
    |> JS.focus_first(to: "##{id}-content")
  end

  def hide_modal(js \\ %JS{}, id) do
    js
    |> JS.hide(
      to: "##{id}-bg",
      transition: {"transition-all transform ease-in duration-200", "opacity-100", "opacity-0"}
    )
    |> hide("##{id}-container")
    |> JS.hide(to: "##{id}", transition: {"block", "block", "hidden"})
    |> JS.remove_class("overflow-hidden", to: "body")
    |> JS.pop_focus()
  end

  attr(:id, :string, required: true, doc: "id for root tabs tag")
  attr(:default, :string, default: nil, doc: "default tab value")
  attr(:class, :string, default: nil)
  slot(:inner_block, required: true)
  attr(:rest, :global)

  def tabs(assigns) do
    ~H"""
    <div class={@class} id={@id} {@rest}>
      {render_slot(@inner_block)}
    </div>
    """
  end

  attr(:class, :string, default: nil)
  slot(:inner_block, required: true)
  attr(:rest, :global)

  def tabs_list(assigns) do
    ~H"""
    <div
      class={[
        "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
        @class
      ]}
      {@rest}
    >
      {render_slot(@inner_block)}
    </div>
    """
  end

  attr(:root, :string, required: true, doc: "id of root tabs tag")
  attr(:value, :string, required: true, doc: "target value of tab content")
  attr(:class, :string, default: nil)
  slot(:inner_block, required: true)
  attr(:rest, :global)

  def tabs_trigger(assigns) do
    ~H"""
    <button
      class={[
        "tabs-trigger",
        "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
        @class
      ]}
      data-target={@value}
      phx-click={show_tab(@root, @value)}
      {@rest}
    >
      {render_slot(@inner_block)}
    </button>
    """
  end

  attr(:value, :string, required: true, doc: "unique for tab content")
  attr(:class, :string, default: nil)
  slot(:inner_block, required: true)
  attr(:rest, :global)

  def tabs_content(assigns) do
    ~H"""
    <div
      class={[
        "tabs-content",
        "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
        @class
      ]}
      value={@value}
      {@rest}
    >
      {render_slot(@inner_block)}
    </div>
    """
  end

  @doc """
  Card component

  ## Examples:

        <.card>
          <.card_header>
            <.card_title>Card title</.card_title>
            <.card_description>Card subtitle</.card_description>
          </.card_header>
          <.card_content>
            Card text
          </.card_content>
          <.card_footer>
            <.button>Button</.button>
          </.card_footer>
        </.card>
  """

  attr(:class, :string, default: nil)
  slot(:inner_block, required: true)
  attr(:rest, :global)

  def card(assigns) do
    ~H"""
    <div
      class={["rounded-xl border bg-card text-card-foreground shadow overflow-x-auto", @class]}
      {@rest}
    >
      {render_slot(@inner_block)}
    </div>
    """
  end

  attr(:class, :string, default: nil)
  slot(:inner_block, required: true)
  attr(:rest, :global)

  def card_header(assigns) do
    ~H"""
    <div class={["flex flex-col space-y-1.5 p-6", @class]} {@rest}>
      {render_slot(@inner_block)}
    </div>
    """
  end

  attr(:class, :string, default: nil)
  slot(:inner_block, required: true)
  attr(:rest, :global)

  def card_title(assigns) do
    ~H"""
    <h3 class={["text-2xl font-semibold leading-none tracking-tight", @class]} {@rest}>
      {render_slot(@inner_block)}
    </h3>
    """
  end

  attr(:class, :string, default: nil)
  slot(:inner_block, required: true)
  attr(:rest, :global)

  def card_description(assigns) do
    ~H"""
    <p class={["text-sm text-muted-foreground", @class]} {@rest}>
      {render_slot(@inner_block)}
    </p>
    """
  end

  attr(:class, :string, default: nil)
  slot(:inner_block, required: true)
  attr(:rest, :global)

  def card_content(assigns) do
    ~H"""
    <div class={["p-6", @class]} {@rest}>
      {render_slot(@inner_block)}
    </div>
    """
  end

  attr(:class, :string, default: nil)
  slot(:inner_block, required: true)
  attr(:rest, :global)

  def card_footer(assigns) do
    ~H"""
    <div class={["flex items-center justify-between p-6 pt-0 ", @class]} {@rest}>
      {render_slot(@inner_block)}
    </div>
    """
  end

  # Set selected tab to active
  # show appropriate tab content
  defp show_tab(root, value) do
    %JS{}
    |> JS.set_attribute({"data-state", ""}, to: "##{root} .tabs-trigger[data-state=active]")
    |> JS.set_attribute({"data-state", "active"},
      to: "##{root} .tabs-trigger[data-target=#{value}]"
    )
    |> JS.hide(to: "##{root} .tabs-content:not([value=#{value}])")
    |> JS.show(to: "##{root} .tabs-content[value=#{value}]")
  end

  attr :view_type, :string, default: "LiveView"
  attr :view_url, :string, required: true
  attr :view_language, :string, default: "heex"
  attr :raw_view_url, :string, required: true
  attr :react_url, :string, required: true
  attr :raw_react_url, :string, required: true
  attr :react_language, :string, default: "jsx"
  slot :inner_block, required: true

  def demo(assigns) do
    ~H"""
    <.tabs default="preview" id="demo" class="w-full">
      <.tabs_list class="grid w-full grid-cols-3">
        <.tabs_trigger root="demo" value="preview" data-state="active">Preview</.tabs_trigger>
        <.tabs_trigger root="demo" value="view">{@view_type}</.tabs_trigger>
        <.tabs_trigger root="demo" value="react">React</.tabs_trigger>
      </.tabs_list>
      <.tabs_content value="preview">
        <.card>
          <.card_content>
            {render_slot(@inner_block)}
          </.card_content>
        </.card>
      </.tabs_content>
      <.tabs_content value="view" class="hidden">
        <.card>
          <div class="pt-6 px-6">
            <a
              class="hover:underline font-medium text-card-foreground"
              href={@view_url}
              target="_blank"
            >
              Check on Github
            </a>
          </div>
          <.card_content>
            <LiveReact.react name="GithubCode" url={@raw_view_url} language="elixir" />
          </.card_content>
        </.card>
      </.tabs_content>
      <.tabs_content value="react" class="hidden">
        <.card>
          <div class="pt-6 px-6">
            <a
              class="hover:underline font-medium text-card-foreground"
              href={@react_url}
              target="_blank"
            >
              Check on Github
            </a>
          </div>
          <.card_content class="p-6">
            <LiveReact.react name="GithubCode" url={@raw_react_url} language={@react_language} />
          </.card_content>
        </.card>
      </.tabs_content>
    </.tabs>
    """
  end

  attr :class, :string, default: nil
  attr :size, :integer, default: 200
  attr :duration, :integer, default: 15
  attr :anchor, :integer, default: 90
  attr :color_from, :string, default: "#ffaa40"
  attr :color_to, :string, default: "#9c40ff"
  attr :delay, :integer, default: 0

  def border_beam(assigns) do
    style = """
      --size: #{assigns.size};
      --duration: #{assigns.duration};
      --anchor: #{assigns.anchor};
      --border-width: 1;
      --color-from: #{assigns.color_from};
      --color-to: #{assigns.color_to};
      --delay: -#{assigns.delay}s;
    """

    assigns = assign(assigns, style: style)

    ~H"""
    <div
      style={@style}
      class={"
          pointer-events-none absolute inset-0 rounded-[inherit] [border:calc(var(--border-width)*1px)_solid_transparent]
          ![mask-clip:padding-box,border-box] ![mask-composite:intersect] [mask:linear-gradient(transparent,transparent),linear-gradient(white,white)]
          after:absolute after:aspect-square after:w-[calc(var(--size)*1px)] after:animate-border-beam after:[animation-delay:var(--delay)] after:[background:linear-gradient(to_left,var(--color-from),var(--color-to),transparent)] after:[offset-anchor:calc(var(--anchor)*1%)_50%] after:[offset-path:rect(0_auto_auto_0_round_calc(var(--size)*1px))]
          #{@class}
        "}
    />
    """
  end

  @doc """
  Translates an error message using gettext.
  """
  def translate_error({msg, opts}) do
    # You can make use of gettext to translate error messages by
    # uncommenting and adjusting the following code:

    # if count = opts[:count] do
    #   Gettext.dngettext(LiveReactExamplesWeb.Gettext, "errors", msg, msg, count, opts)
    # else
    #   Gettext.dgettext(LiveReactExamplesWeb.Gettext, "errors", msg, opts)
    # end

    Enum.reduce(opts, msg, fn {key, value}, acc ->
      String.replace(acc, "%{#{key}}", fn _ -> to_string(value) end)
    end)
  end

  @doc """
  Translates the errors for a field from a keyword list of errors.
  """
  def translate_errors(errors, field) when is_list(errors) do
    for {^field, {msg, opts}} <- errors, do: translate_error({msg, opts})
  end
end

================
File: live_react_examples/lib/live_react_examples_web/components/layouts.ex
================
defmodule LiveReactExamplesWeb.Layouts do
  @moduledoc """
  This module holds different layouts used by your application.

  See the `layouts` directory for all templates available.
  The "root" layout is a skeleton rendered as part of the
  application router. The "app" layout is set as the default
  layout on both `use LiveReactExamplesWeb, :controller` and
  `use LiveReactExamplesWeb, :live_view`.
  """
  use LiveReactExamplesWeb, :html

  embed_templates "layouts/*"
end

================
File: live_react_examples/lib/live_react_examples_web/controllers/page_html/home.html.heex
================
<.flash_group flash={@flash} />
<div class="left-[40rem] fixed inset-y-0 right-0 z-0 hidden lg:block xl:left-[50rem]">
  <svg
    viewBox="0 0 1480 957"
    fill="none"
    aria-hidden="true"
    class="absolute inset-0 h-full w-full"
    preserveAspectRatio="xMinYMid slice"
  >
    <path fill="#EE7868" d="M0 0h1480v957H0z" />
    <path
      d="M137.542 466.27c-582.851-48.41-988.806-82.127-1608.412 658.2l67.39 810 3083.15-256.51L1535.94-49.622l-98.36 8.183C1269.29 281.468 734.115 515.799 146.47 467.012l-8.928-.742Z"
      fill="#FF9F92"
    />
    <path
      d="M371.028 528.664C-169.369 304.988-545.754 149.198-1361.45 665.565l-182.58 792.025 3014.73 694.98 389.42-1689.25-96.18-22.171C1505.28 697.438 924.153 757.586 379.305 532.09l-8.277-3.426Z"
      fill="#FA8372"
    />
    <path
      d="M359.326 571.714C-104.765 215.795-428.003-32.102-1349.55 255.554l-282.3 1224.596 3047.04 722.01 312.24-1354.467C1411.25 1028.3 834.355 935.995 366.435 577.166l-7.109-5.452Z"
      fill="#E96856"
      fill-opacity=".6"
    />
    <path
      d="M1593.87 1236.88c-352.15 92.63-885.498-145.85-1244.602-613.557l-5.455-7.105C-12.347 152.31-260.41-170.8-1225-131.458l-368.63 1599.048 3057.19 704.76 130.31-935.47Z"
      fill="#C42652"
      fill-opacity=".2"
    />
    <path
      d="M1411.91 1526.93c-363.79 15.71-834.312-330.6-1085.883-863.909l-3.822-8.102C72.704 125.95-101.074-242.476-1052.01-408.907l-699.85 1484.267 2837.75 1338.01 326.02-886.44Z"
      fill="#A41C42"
      fill-opacity=".2"
    />
    <path
      d="M1116.26 1863.69c-355.457-78.98-720.318-535.27-825.287-1115.521l-1.594-8.816C185.286 163.833 112.786-237.016-762.678-643.898L-1822.83 608.665 571.922 2635.55l544.338-771.86Z"
      fill="#A41C42"
      fill-opacity=".2"
    />
  </svg>
</div>
<div class="px-4 py-10 sm:px-6 sm:py-28 lg:px-8 xl:px-28 xl:py-32">
  <div class="mx-auto max-w-xl lg:mx-0">
    <svg viewBox="0 0 71 48" class="h-12" aria-hidden="true">
      <path
        d="m26.371 33.477-.552-.1c-3.92-.729-6.397-3.1-7.57-6.829-.733-2.324.597-4.035 3.035-4.148 1.995-.092 3.362 1.055 4.57 2.39 1.557 1.72 2.984 3.558 4.514 5.305 2.202 2.515 4.797 4.134 8.347 3.634 3.183-.448 5.958-1.725 8.371-3.828.363-.316.761-.592 1.144-.886l-.241-.284c-2.027.63-4.093.841-6.205.735-3.195-.16-6.24-.828-8.964-2.582-2.486-1.601-4.319-3.746-5.19-6.611-.704-2.315.736-3.934 3.135-3.6.948.133 1.746.56 2.463 1.165.583.493 1.143 1.015 1.738 1.493 2.8 2.25 6.712 2.375 10.265-.068-5.842-.026-9.817-3.24-13.308-7.313-1.366-1.594-2.7-3.216-4.095-4.785-2.698-3.036-5.692-5.71-9.79-6.623C12.8-.623 7.745.14 2.893 2.361 1.926 2.804.997 3.319 0 4.149c.494 0 .763.006 1.032 0 2.446-.064 4.28 1.023 5.602 3.024.962 1.457 1.415 3.104 1.761 4.798.513 2.515.247 5.078.544 7.605.761 6.494 4.08 11.026 10.26 13.346 2.267.852 4.591 1.135 7.172.555ZM10.751 3.852c-.976.246-1.756-.148-2.56-.962 1.377-.343 2.592-.476 3.897-.528-.107.848-.607 1.306-1.336 1.49Zm32.002 37.924c-.085-.626-.62-.901-1.04-1.228-1.857-1.446-4.03-1.958-6.333-2-1.375-.026-2.735-.128-4.031-.61-.595-.22-1.26-.505-1.244-1.272.015-.78.693-1 1.31-1.184.505-.15 1.026-.247 1.6-.382-1.46-.936-2.886-1.065-4.787-.3-2.993 1.202-5.943 1.06-8.926-.017-1.684-.608-3.179-1.563-4.735-2.408l-.043.03a2.96 2.96 0 0 0 .04-.029c-.038-.117-.107-.12-.197-.054l.122.107c1.29 2.115 3.034 3.817 5.004 5.271 3.793 2.8 7.936 4.471 12.784 3.73A66.714 66.714 0 0 1 37 40.877c1.98-.16 3.866.398 5.753.899Zm-9.14-30.345c-.105-.076-.206-.266-.42-.069 1.745 2.36 3.985 4.098 6.683 5.193 4.354 1.767 8.773 2.07 13.293.51 3.51-1.21 6.033-.028 7.343 3.38.19-3.955-2.137-6.837-5.843-7.401-2.084-.318-4.01.373-5.962.94-5.434 1.575-10.485.798-15.094-2.553Zm27.085 15.425c.708.059 1.416.123 2.124.185-1.6-1.405-3.55-1.517-5.523-1.404-3.003.17-5.167 1.903-7.14 3.972-1.739 1.824-3.31 3.87-5.903 4.604.043.078.054.117.066.117.35.005.699.021 1.047.005 3.768-.17 7.317-.965 10.14-3.7.89-.86 1.685-1.817 2.544-2.71.716-.746 1.584-1.159 2.645-1.07Zm-8.753-4.67c-2.812.246-5.254 1.409-7.548 2.943-1.766 1.18-3.654 1.738-5.776 1.37-.374-.066-.75-.114-1.124-.17l-.013.156c.135.07.265.151.405.207.354.14.702.308 1.07.395 4.083.971 7.992.474 11.516-1.803 2.221-1.435 4.521-1.707 7.013-1.336.252.038.503.083.756.107.234.022.479.255.795.003-2.179-1.574-4.526-2.096-7.094-1.872Zm-10.049-9.544c1.475.051 2.943-.142 4.486-1.059-.452.04-.643.04-.827.076-2.126.424-4.033-.04-5.733-1.383-.623-.493-1.257-.974-1.889-1.457-2.503-1.914-5.374-2.555-8.514-2.5.05.154.054.26.108.315 3.417 3.455 7.371 5.836 12.369 6.008Zm24.727 17.731c-2.114-2.097-4.952-2.367-7.578-.537 1.738.078 3.043.632 4.101 1.728.374.388.763.768 1.182 1.106 1.6 1.29 4.311 1.352 5.896.155-1.861-.726-1.861-.726-3.601-2.452Zm-21.058 16.06c-1.858-3.46-4.981-4.24-8.59-4.008a9.667 9.667 0 0 1 2.977 1.39c.84.586 1.547 1.311 2.243 2.055 1.38 1.473 3.534 2.376 4.962 2.07-.656-.412-1.238-.848-1.592-1.507Zm17.29-19.32c0-.023.001-.045.003-.068l-.006.006.006-.006-.036-.004.021.018.012.053Zm-20 14.744a7.61 7.61 0 0 0-.072-.041.127.127 0 0 0 .015.043c.005.008.038 0 .058-.002Zm-.072-.041-.008-.034-.008.01.008-.01-.022-.006.005.026.024.014Z"
        fill="#FD4F00"
      />
    </svg>
    <h1 class="text-brand mt-10 flex items-center text-sm font-semibold leading-6">
      Phoenix Framework
      <small class="bg-brand/5 text-[0.8125rem] ml-3 rounded-full px-2 font-medium leading-6">
        v{Application.spec(:phoenix, :vsn)}
      </small>
    </h1>
    <p class="text-[2rem] mt-4 font-semibold leading-10 tracking-tighter text-zinc-900 text-balance">
      Peace of mind from prototype to production.
    </p>
    <p class="mt-4 text-base leading-7 text-zinc-600">
      Build rich, interactive web applications quickly, with less code and fewer moving parts. Join our growing community of developers using Phoenix to craft APIs, HTML5 apps and more, for fun or at scale.
    </p>
    <div class="flex">
      <div class="w-full sm:w-auto">
        <div class="mt-10 grid grid-cols-1 gap-x-6 gap-y-4 sm:grid-cols-3">
          <a
            href="https://hexdocs.pm/phoenix/overview.html"
            class="group relative rounded-2xl px-6 py-4 text-sm font-semibold leading-6 text-zinc-900 sm:py-6"
          >
            <span class="absolute inset-0 rounded-2xl bg-zinc-50 transition group-hover:bg-zinc-100 sm:group-hover:scale-105">
            </span>
            <span class="relative flex items-center gap-4 sm:flex-col">
              <svg viewBox="0 0 24 24" fill="none" aria-hidden="true" class="h-6 w-6">
                <path d="m12 4 10-2v18l-10 2V4Z" fill="#18181B" fill-opacity=".15" />
                <path
                  d="M12 4 2 2v18l10 2m0-18v18m0-18 10-2v18l-10 2"
                  stroke="#18181B"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
              Guides &amp; Docs
            </span>
          </a>
          <a
            href="https://github.com/phoenixframework/phoenix"
            class="group relative rounded-2xl px-6 py-4 text-sm font-semibold leading-6 text-zinc-900 sm:py-6"
          >
            <span class="absolute inset-0 rounded-2xl bg-zinc-50 transition group-hover:bg-zinc-100 sm:group-hover:scale-105">
            </span>
            <span class="relative flex items-center gap-4 sm:flex-col">
              <svg viewBox="0 0 24 24" aria-hidden="true" class="h-6 w-6">
                <path
                  fill-rule="evenodd"
                  clip-rule="evenodd"
                  d="M12 0C5.37 0 0 5.506 0 12.303c0 5.445 3.435 10.043 8.205 11.674.6.107.825-.262.825-.585 0-.292-.015-1.261-.015-2.291C6 21.67 5.22 20.346 4.98 19.654c-.135-.354-.72-1.446-1.23-1.738-.42-.23-1.02-.8-.015-.815.945-.015 1.62.892 1.845 1.261 1.08 1.86 2.805 1.338 3.495 1.015.105-.8.42-1.338.765-1.645-2.67-.308-5.46-1.37-5.46-6.075 0-1.338.465-2.446 1.23-3.307-.12-.308-.54-1.569.12-3.26 0 0 1.005-.323 3.3 1.26.96-.276 1.98-.415 3-.415s2.04.139 3 .416c2.295-1.6 3.3-1.261 3.3-1.261.66 1.691.24 2.952.12 3.26.765.861 1.23 1.953 1.23 3.307 0 4.721-2.805 5.767-5.475 6.075.435.384.81 1.122.81 2.276 0 1.645-.015 2.968-.015 3.383 0 .323.225.707.825.585a12.047 12.047 0 0 0 5.919-4.489A12.536 12.536 0 0 0 24 12.304C24 5.505 18.63 0 12 0Z"
                  fill="#18181B"
                />
              </svg>
              Source Code
            </span>
          </a>
          <a
            href={"https://github.com/phoenixframework/phoenix/blob/v#{Application.spec(:phoenix, :vsn)}/CHANGELOG.md"}
            class="group relative rounded-2xl px-6 py-4 text-sm font-semibold leading-6 text-zinc-900 sm:py-6"
          >
            <span class="absolute inset-0 rounded-2xl bg-zinc-50 transition group-hover:bg-zinc-100 sm:group-hover:scale-105">
            </span>
            <span class="relative flex items-center gap-4 sm:flex-col">
              <svg viewBox="0 0 24 24" fill="none" aria-hidden="true" class="h-6 w-6">
                <path
                  d="M12 1v6M12 17v6"
                  stroke="#18181B"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
                <circle
                  cx="12"
                  cy="12"
                  r="4"
                  fill="#18181B"
                  fill-opacity=".15"
                  stroke="#18181B"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
              Changelog
            </span>
          </a>
        </div>
        <div class="mt-10 grid grid-cols-1 gap-y-4 text-sm leading-6 text-zinc-700 sm:grid-cols-2">
          <div>
            <a
              href="https://twitter.com/elixirphoenix"
              class="group -mx-2 -my-0.5 inline-flex items-center gap-3 rounded-lg px-2 py-0.5 hover:bg-zinc-50 hover:text-zinc-900"
            >
              <svg
                viewBox="0 0 16 16"
                aria-hidden="true"
                class="h-4 w-4 fill-zinc-400 group-hover:fill-zinc-600"
              >
                <path d="M5.403 14c5.283 0 8.172-4.617 8.172-8.62 0-.131 0-.262-.008-.391A6.033 6.033 0 0 0 15 3.419a5.503 5.503 0 0 1-1.65.477 3.018 3.018 0 0 0 1.263-1.676 5.579 5.579 0 0 1-1.824.736 2.832 2.832 0 0 0-1.63-.916 2.746 2.746 0 0 0-1.821.319A2.973 2.973 0 0 0 8.076 3.78a3.185 3.185 0 0 0-.182 1.938 7.826 7.826 0 0 1-3.279-.918 8.253 8.253 0 0 1-2.64-2.247 3.176 3.176 0 0 0-.315 2.208 3.037 3.037 0 0 0 1.203 1.836A2.739 2.739 0 0 1 1.56 6.22v.038c0 .7.23 1.377.65 1.919.42.54 1.004.912 1.654 1.05-.423.122-.866.14-1.297.052.184.602.541 1.129 1.022 1.506a2.78 2.78 0 0 0 1.662.598 5.656 5.656 0 0 1-2.007 1.074A5.475 5.475 0 0 1 1 12.64a7.827 7.827 0 0 0 4.403 1.358" />
              </svg>
              Follow on Twitter
            </a>
          </div>
          <div>
            <a
              href="https://elixirforum.com"
              class="group -mx-2 -my-0.5 inline-flex items-center gap-3 rounded-lg px-2 py-0.5 hover:bg-zinc-50 hover:text-zinc-900"
            >
              <svg
                viewBox="0 0 16 16"
                aria-hidden="true"
                class="h-4 w-4 fill-zinc-400 group-hover:fill-zinc-600"
              >
                <path d="M8 13.833c3.866 0 7-2.873 7-6.416C15 3.873 11.866 1 8 1S1 3.873 1 7.417c0 1.081.292 2.1.808 2.995.606 1.05.806 2.399.086 3.375l-.208.283c-.285.386-.01.905.465.85.852-.098 2.048-.318 3.137-.81a3.717 3.717 0 0 1 1.91-.318c.263.027.53.041.802.041Z" />
              </svg>
              Discuss on the Elixir Forum
            </a>
          </div>
          <div>
            <a
              href="https://web.libera.chat/#elixir"
              class="group -mx-2 -my-0.5 inline-flex items-center gap-3 rounded-lg px-2 py-0.5 hover:bg-zinc-50 hover:text-zinc-900"
            >
              <svg
                viewBox="0 0 16 16"
                aria-hidden="true"
                class="h-4 w-4 fill-zinc-400 group-hover:fill-zinc-600"
              >
                <path
                  fill-rule="evenodd"
                  clip-rule="evenodd"
                  d="M6.356 2.007a.75.75 0 0 1 .637.849l-1.5 10.5a.75.75 0 1 1-1.485-.212l1.5-10.5a.75.75 0 0 1 .848-.637ZM11.356 2.008a.75.75 0 0 1 .637.848l-1.5 10.5a.75.75 0 0 1-1.485-.212l1.5-10.5a.75.75 0 0 1 .848-.636Z"
                />
                <path
                  fill-rule="evenodd"
                  clip-rule="evenodd"
                  d="M14 5.25a.75.75 0 0 1-.75.75h-9.5a.75.75 0 0 1 0-1.5h9.5a.75.75 0 0 1 .75.75ZM13 10.75a.75.75 0 0 1-.75.75h-9.5a.75.75 0 0 1 0-1.5h9.5a.75.75 0 0 1 .75.75Z"
                />
              </svg>
              Chat on Libera IRC
            </a>
          </div>
          <div>
            <a
              href="https://discord.gg/elixir"
              class="group -mx-2 -my-0.5 inline-flex items-center gap-3 rounded-lg px-2 py-0.5 hover:bg-zinc-50 hover:text-zinc-900"
            >
              <svg
                viewBox="0 0 16 16"
                aria-hidden="true"
                class="h-4 w-4 fill-zinc-400 group-hover:fill-zinc-600"
              >
                <path d="M13.545 2.995c-1.02-.46-2.114-.8-3.257-.994a.05.05 0 0 0-.052.024c-.141.246-.297.567-.406.82a12.377 12.377 0 0 0-3.658 0 8.238 8.238 0 0 0-.412-.82.052.052 0 0 0-.052-.024 13.315 13.315 0 0 0-3.257.994.046.046 0 0 0-.021.018C.356 6.063-.213 9.036.066 11.973c.001.015.01.029.02.038a13.353 13.353 0 0 0 3.996 1.987.052.052 0 0 0 .056-.018c.308-.414.582-.85.818-1.309a.05.05 0 0 0-.028-.069 8.808 8.808 0 0 1-1.248-.585.05.05 0 0 1-.005-.084c.084-.062.168-.126.248-.191a.05.05 0 0 1 .051-.007c2.619 1.176 5.454 1.176 8.041 0a.05.05 0 0 1 .053.006c.08.065.164.13.248.192a.05.05 0 0 1-.004.084c-.399.23-.813.423-1.249.585a.05.05 0 0 0-.027.07c.24.457.514.893.817 1.307a.051.051 0 0 0 .056.019 13.31 13.31 0 0 0 4.001-1.987.05.05 0 0 0 .021-.037c.334-3.396-.559-6.345-2.365-8.96a.04.04 0 0 0-.021-.02Zm-8.198 7.19c-.789 0-1.438-.712-1.438-1.587 0-.874.637-1.586 1.438-1.586.807 0 1.45.718 1.438 1.586 0 .875-.637 1.587-1.438 1.587Zm5.316 0c-.788 0-1.438-.712-1.438-1.587 0-.874.637-1.586 1.438-1.586.807 0 1.45.718 1.438 1.586 0 .875-.63 1.587-1.438 1.587Z" />
              </svg>
              Join our Discord server
            </a>
          </div>
          <div>
            <a
              href="https://fly.io/docs/elixir/getting-started/"
              class="group -mx-2 -my-0.5 inline-flex items-center gap-3 rounded-lg px-2 py-0.5 hover:bg-zinc-50 hover:text-zinc-900"
            >
              <svg
                viewBox="0 0 20 20"
                aria-hidden="true"
                class="h-4 w-4 fill-zinc-400 group-hover:fill-zinc-600"
              >
                <path d="M1 12.5A4.5 4.5 0 005.5 17H15a4 4 0 001.866-7.539 3.504 3.504 0 00-4.504-4.272A4.5 4.5 0 004.06 8.235 4.502 4.502 0 001 12.5z" />
              </svg>
              Deploy your application
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

================
File: live_react_examples/lib/live_react_examples_web/controllers/page_html/lazy.html.heex
================
<.react name="Lazy" />

================
File: live_react_examples/lib/live_react_examples_web/controllers/page_html/simple_props.html.heex
================
<.react name="SimpleProps" user={%{name: "mrdotb", age: 30}} />

================
File: live_react_examples/lib/live_react_examples_web/controllers/page_html/simple.html.heex
================
<.react name="Simple" />

================
File: live_react_examples/lib/live_react_examples_web/controllers/page_html/typescript.html.heex
================
<.react name="Typescript" />

================
File: live_react_examples/lib/live_react_examples_web/controllers/error_html.ex
================
defmodule LiveReactExamplesWeb.ErrorHTML do
  @moduledoc """
  This module is invoked by your endpoint in case of errors on HTML requests.

  See config/config.exs.
  """
  use LiveReactExamplesWeb, :html

  # If you want to customize your error pages,
  # uncomment the embed_templates/1 call below
  # and add pages to the error directory:
  #
  #   * lib/live_react_examples_web/controllers/error_html/404.html.heex
  #   * lib/live_react_examples_web/controllers/error_html/500.html.heex
  #
  # embed_templates "error_html/*"

  # The default is to render a plain text page based on
  # the template name. For example, "404.html" becomes
  # "Not Found".
  def render(template, _assigns) do
    Phoenix.Controller.status_message_from_template(template)
  end
end

================
File: live_react_examples/lib/live_react_examples_web/controllers/error_json.ex
================
defmodule LiveReactExamplesWeb.ErrorJSON do
  @moduledoc """
  This module is invoked by your endpoint in case of errors on JSON requests.

  See config/config.exs.
  """

  # If you want to customize a particular status code,
  # you may add your own clauses, such as:
  #
  # def render("500.json", _assigns) do
  #   %{errors: %{detail: "Internal Server Error"}}
  # end

  # By default, Phoenix returns the status message from
  # the template name. For example, "404.json" becomes
  # "Not Found".
  def render(template, _assigns) do
    %{errors: %{detail: Phoenix.Controller.status_message_from_template(template)}}
  end
end

================
File: live_react_examples/lib/live_react_examples_web/controllers/page_controller.ex
================
defmodule LiveReactExamplesWeb.PageController do
  use LiveReactExamplesWeb, :controller

  def home(conn, _params) do
    redirect(conn, to: ~p"/simple")
  end

  def simple(conn, _params) do
    render(conn, :simple, demo: :simple)
  end

  def simple_props(conn, _params) do
    render(conn, :simple_props, demo: :simple_props)
  end

  def typescript(conn, _params) do
    render(conn, :typescript, demo: :typescript)
  end

  def lazy(conn, _params) do
    render(conn, :lazy, demo: :lazy)
  end
end

================
File: live_react_examples/lib/live_react_examples_web/controllers/page_html.ex
================
defmodule LiveReactExamplesWeb.PageHTML do
  @moduledoc """
  This module contains pages rendered by PageController.

  See the `page_html` directory for all templates available.
  """
  use LiveReactExamplesWeb, :html

  embed_templates "page_html/*"
end

================
File: live_react_examples/lib/live_react_examples_web/live/counter.ex
================
defmodule LiveReactExamplesWeb.LiveCounter do
  use LiveReactExamplesWeb, :live_view

  def render(assigns) do
    ~H"""
    <h1 class="flex justify-center mb-10 font-bold">Hybrid: LiveView + React</h1>
    <.react name="Counter" count={@count} socket={@socket} ssr={true} />
    """
  end

  def mount(_session, _params, socket) do
    {:ok, assign(socket, :count, 10)}
  end

  def handle_event("set_count", %{"value" => number}, socket) do
    {:noreply, assign(socket, :count, String.to_integer(number))}
  end
end

================
File: live_react_examples/lib/live_react_examples_web/live/demo_assigns.ex
================
defmodule LiveReactExamplesWeb.LiveDemoAssigns do
  @moduledoc """
  Assigns the current demo state.
  """

  import Phoenix.Component
  import Phoenix.LiveView

  def on_mount(:default, _params, _session, socket) do
    socket = attach_hook(socket, :active_tab, :handle_params, &set_active_demo/3)
    {:cont, socket}
  end

  defp set_active_demo(_params, _url, socket) do
    demo =
      case {socket.view, socket.assigns.live_action} do
        {LiveReactExamplesWeb.LiveCounter, _} ->
          :counter

        {LiveReactExamplesWeb.LiveLogList, _} ->
          :log_list

        {LiveReactExamplesWeb.LiveFlashSonner, _} ->
          :flash_sonner

        {LiveReactExamplesWeb.LiveSSR, _} ->
          :ssr

        {LiveReactExamplesWeb.LiveHybridForm, _} ->
          :hybrid_form

        {LiveReactExamplesWeb.LiveSlot, _} ->
          :slot

        {_view, _live_action} ->
          nil
      end

    {:cont, assign(socket, demo: demo)}
  end
end

================
File: live_react_examples/lib/live_react_examples_web/live/flash_sonner.ex
================
defmodule LiveReactExamplesWeb.LiveFlashSonner do
  use LiveReactExamplesWeb, :live_view

  def render(assigns) do
    ~H"""
    <h1 class="flex justify-center mb-10 font-bold">Flash sonner</h1>
    <.button phx-click="info">
      info
    </.button>
    <.button phx-click="error">
      error
    </.button>
    """
  end

  def mount(_session, _params, socket) do
    {:ok, socket}
  end

  def handle_event("info", _params, socket) do
    {:noreply, put_flash(socket, :info, "This is an info message")}
  end

  def handle_event("error", _params, socket) do
    {:noreply, put_flash(socket, :error, "This is an error message")}
  end
end

================
File: live_react_examples/lib/live_react_examples_web/live/hybrid_form.ex
================
defmodule LiveReactExamplesWeb.LiveHybridForm do
  use LiveReactExamplesWeb, :live_view

  def render(assigns) do
    ~H"""
    <h1 class="flex justify-center mb-10 font-bold">Hybrid form</h1>

    <.simple_form for={@form} phx-change="validate" phx-submit="submit">
      <.input field={@form[:email]} label="Email" />
      <.react
        label="Delay Between"
        name="DelaySlider"
        inputName="settings[delay_between]"
        value={@form[:delay_between].value}
        min={2_000}
        max={90_000}
        step={2_000}
      />
    </.simple_form>

    <div class="mt-10">
      <pre>
        <%= inspect(@form.params, pretty: true) %>
      </pre>
    </div>
    """
  end

  def mount(_session, _params, socket) do
    form =
      to_form(
        %{
          "email" => "hello@mrdotb.com",
          "delay_between" => [4_000, 30_000]
        },
        as: :settings
      )

    socket = assign(socket, form: form)
    {:ok, socket}
  end

  def handle_event("validate", %{"settings" => settings}, socket) do
    form = to_form(settings, as: :settings, action: :validate)
    socket = assign(socket, form: form)
    {:noreply, socket}
  end

  def handle_event("submit", _, socket) do
    {:noreply, socket}
  end
end

================
File: live_react_examples/lib/live_react_examples_web/live/log_list.ex
================
defmodule LiveReactExamplesWeb.LiveLogList do
  use LiveReactExamplesWeb, :live_view

  def render(assigns) do
    ~H"""
    <.react name="LogList" socket={@socket} />
    """
  end

  def mount(_params, _session, socket) do
    if connected?(socket), do: :timer.send_interval(1000, self(), :tick)
    {:ok, socket}
  end

  def handle_event("add_item", %{"body" => body}, socket) do
    socket = push_event(socket, "new_item", create_log(body))
    {:noreply, socket}
  end

  def handle_info(:tick, socket) do
    datetime =
      DateTime.utc_now()
      |> DateTime.to_string()

    socket = push_event(socket, "new_item", create_log(datetime))
    {:noreply, socket}
  end

  defp create_log(body) do
    %{id: System.unique_integer([:positive]), body: body}
  end
end

================
File: live_react_examples/lib/live_react_examples_web/live/slot.ex
================
defmodule LiveReactExamplesWeb.LiveSlot do
  use LiveReactExamplesWeb, :live_view

  def render(assigns) do
    ~H"""
    <h1 class="flex justify-center mb-10 font-bold">Slot</h1>
    <.react name="Slot" socket={@socket} ssr={true}>
      <div>button component passed as a slot and rendered</div>
      <.button>
        button
      </.button>
    </.react>
    """
  end

  def mount(_session, _params, socket) do
    {:ok, assign(socket, :count, 10)}
  end

  def handle_event("set_count", %{"value" => number}, socket) do
    {:noreply, assign(socket, :count, String.to_integer(number))}
  end
end

================
File: live_react_examples/lib/live_react_examples_web/live/ssr.ex
================
defmodule LiveReactExamplesWeb.LiveSSR do
  use LiveReactExamplesWeb, :live_view

  def render(assigns) do
    ~H"""
    <h1 class="flex justify-center mb-10 font-bold">SSR</h1>
    <a
      class="mb-4 block underline"
      href="https://github.com/mrdotb/live_react/blob/main/guides/ssr.md"
    >
      SSR guide
    </a>
    <div class="flex space-x-2">
      <.react ssr={true} name="SSR" socket={@socket} text="I am rendered on Server" />
      <.react ssr={false} name="SSR" socket={@socket} text="I am rendered on Client" />
    </div>
    """
  end

  def mount(_session, _params, socket) do
    {:ok, socket}
  end
end

================
File: live_react_examples/lib/live_react_examples_web/endpoint.ex
================
defmodule LiveReactExamplesWeb.Endpoint do
  use Phoenix.Endpoint, otp_app: :live_react_examples

  # The session will be stored in the cookie and signed,
  # this means its contents can be read but not tampered with.
  # Set :encryption_salt if you would also like to encrypt it.
  @session_options [
    store: :cookie,
    key: "_live_react_examples_key",
    signing_salt: "7e1J3j+/",
    same_site: "Lax"
  ]

  socket "/live", Phoenix.LiveView.Socket,
    websocket: [connect_info: [session: @session_options]],
    longpoll: [connect_info: [session: @session_options]]

  # Serve at "/" the static files from "priv/static" directory.
  #
  # You should set gzip to true if you are running phx.digest
  # when deploying your static files in production.
  plug Plug.Static,
    at: "/",
    from: :live_react_examples,
    gzip: false,
    only: LiveReactExamplesWeb.static_paths()

  # Code reloading can be explicitly enabled under the
  # :code_reloader configuration of your endpoint.
  if code_reloading? do
    socket "/phoenix/live_reload/socket", Phoenix.LiveReloader.Socket
    plug Phoenix.LiveReloader
    plug Phoenix.CodeReloader
  end

  plug Plug.RequestId
  plug Plug.Telemetry, event_prefix: [:phoenix, :endpoint]

  plug Plug.Parsers,
    parsers: [:urlencoded, :multipart, :json],
    pass: ["*/*"],
    json_decoder: Phoenix.json_library()

  plug Plug.MethodOverride
  plug Plug.Head
  plug Plug.Session, @session_options
  plug LiveReactExamplesWeb.Router
end

================
File: live_react_examples/lib/live_react_examples_web/router.ex
================
defmodule LiveReactExamplesWeb.Router do
  use LiveReactExamplesWeb, :router

  pipeline :browser do
    plug :accepts, ["html"]
    plug :fetch_session
    plug :fetch_live_flash
    plug :put_root_layout, html: {LiveReactExamplesWeb.Layouts, :root}
    plug :protect_from_forgery
    plug :put_secure_browser_headers
  end

  # pipeline :api do
  #   plug :accepts, ["json"]
  # end

  scope "/", LiveReactExamplesWeb do
    pipe_through :browser

    get "/", PageController, :home
    get "/lazy", PageController, :lazy
    get "/simple", PageController, :simple
    get "/simple-props", PageController, :simple_props
    get "/typescript", PageController, :typescript

    live "/live-counter", LiveCounter
    live "/log-list", LiveLogList
    live "/flash-sonner", LiveFlashSonner
    live "/ssr", LiveSSR
    live "/hybrid-form", LiveHybridForm
    live "/slot", LiveSlot
  end

  # Other scopes may use custom stacks.
  # scope "/api", LiveReactExamplesWeb do
  #   pipe_through :api
  # end
end

================
File: live_react_examples/lib/live_react_examples_web/telemetry.ex
================
defmodule LiveReactExamplesWeb.Telemetry do
  use Supervisor
  import Telemetry.Metrics

  def start_link(arg) do
    Supervisor.start_link(__MODULE__, arg, name: __MODULE__)
  end

  @impl true
  def init(_arg) do
    children = [
      # Telemetry poller will execute the given period measurements
      # every 10_000ms. Learn more here: https://hexdocs.pm/telemetry_metrics
      {:telemetry_poller, measurements: periodic_measurements(), period: 10_000}
      # Add reporters as children of your supervision tree.
      # {Telemetry.Metrics.ConsoleReporter, metrics: metrics()}
    ]

    Supervisor.init(children, strategy: :one_for_one)
  end

  def metrics do
    [
      # Phoenix Metrics
      summary("phoenix.endpoint.start.system_time",
        unit: {:native, :millisecond}
      ),
      summary("phoenix.endpoint.stop.duration",
        unit: {:native, :millisecond}
      ),
      summary("phoenix.router_dispatch.start.system_time",
        tags: [:route],
        unit: {:native, :millisecond}
      ),
      summary("phoenix.router_dispatch.exception.duration",
        tags: [:route],
        unit: {:native, :millisecond}
      ),
      summary("phoenix.router_dispatch.stop.duration",
        tags: [:route],
        unit: {:native, :millisecond}
      ),
      summary("phoenix.socket_connected.duration",
        unit: {:native, :millisecond}
      ),
      summary("phoenix.channel_joined.duration",
        unit: {:native, :millisecond}
      ),
      summary("phoenix.channel_handled_in.duration",
        tags: [:event],
        unit: {:native, :millisecond}
      ),

      # VM Metrics
      summary("vm.memory.total", unit: {:byte, :kilobyte}),
      summary("vm.total_run_queue_lengths.total"),
      summary("vm.total_run_queue_lengths.cpu"),
      summary("vm.total_run_queue_lengths.io")
    ]
  end

  defp periodic_measurements do
    [
      # A module, function and arguments to be invoked periodically.
      # This function must call :telemetry.execute/3 and a metric must be added above.
      # {LiveReactExamplesWeb, :count_users, []}
    ]
  end
end

================
File: live_react_examples/lib/live_react_examples_web.ex
================
defmodule LiveReactExamplesWeb do
  @moduledoc """
  The entrypoint for defining your web interface, such
  as controllers, components, channels, and so on.

  This can be used in your application as:

      use LiveReactExamplesWeb, :controller
      use LiveReactExamplesWeb, :html

  The definitions below will be executed for every controller,
  component, etc, so keep them short and clean, focused
  on imports, uses and aliases.

  Do NOT define functions inside the quoted expressions
  below. Instead, define additional modules and import
  those modules here.
  """

  def static_paths, do: ~w(assets fonts images favicon.ico robots.txt)

  def router do
    quote do
      use Phoenix.Router, helpers: false

      # Import common connection and controller functions to use in pipelines
      import Plug.Conn
      import Phoenix.Controller
      import Phoenix.LiveView.Router
    end
  end

  def channel do
    quote do
      use Phoenix.Channel
    end
  end

  def controller do
    quote do
      use Phoenix.Controller,
        formats: [:html, :json],
        layouts: [html: LiveReactExamplesWeb.Layouts]

      import Plug.Conn

      unquote(verified_routes())
    end
  end

  def live_view do
    quote do
      use Phoenix.LiveView,
        layout: {LiveReactExamplesWeb.Layouts, :app}

      on_mount LiveReactExamplesWeb.LiveDemoAssigns
      unquote(html_helpers())
    end
  end

  def live_component do
    quote do
      use Phoenix.LiveComponent

      unquote(html_helpers())
    end
  end

  def html do
    quote do
      use Phoenix.Component

      # Import convenience functions from controllers
      import Phoenix.Controller,
        only: [get_csrf_token: 0, view_module: 1, view_template: 1]

      # Include general helpers for rendering HTML
      unquote(html_helpers())
    end
  end

  defp html_helpers do
    quote do
      # HTML escaping functionality
      import Phoenix.HTML
      # Core UI components and translation
      import LiveReactExamplesWeb.CoreComponents

      import LiveReact

      # Shortcut for generating JS commands
      alias Phoenix.LiveView.JS

      # Routes generation with the ~p sigil
      unquote(verified_routes())
    end
  end

  def verified_routes do
    quote do
      use Phoenix.VerifiedRoutes,
        endpoint: LiveReactExamplesWeb.Endpoint,
        router: LiveReactExamplesWeb.Router,
        statics: LiveReactExamplesWeb.static_paths()
    end
  end

  @doc """
  When used, dispatch to the appropriate controller/live_view/etc.
  """
  defmacro __using__(which) when is_atom(which) do
    apply(__MODULE__, which, [])
  end
end

================
File: live_react_examples/lib/live_react_examples.ex
================
defmodule LiveReactExamples do
  @moduledoc """
  LiveReactExamples keeps the contexts that define your domain
  and business logic.

  Contexts are also responsible for managing your data, regardless
  if it comes from the database, an external API or others.
  """

  @url "https://github.com/mrdotb/live_react/blob/main/live_react_examples"
  @raw_url "https://raw.githubusercontent.com/mrdotb/live_react/main/live_react_examples"
  @dead_views "/lib/live_react_examples_web/controllers/page_html"
  @live_views "/lib/live_react_examples_web/live"
  @react "/assets/react-components"

  def demo(name)

  def demo(:simple) do
    %{
      view_type: "DeadView",
      raw_view_url: "#{@raw_url}/#{@dead_views}/simple.html.heex",
      view_url: "#{@url}/#{@dead_views}/simple.html.heex",
      raw_react_url: "#{@raw_url}/#{@react}/simple.jsx",
      react_url: "#{@url}/#{@react}/simple.jsx"
    }
  end

  def demo(:simple_props) do
    %{
      view_type: "DeadView",
      raw_view_url: "#{@raw_url}/#{@dead_views}/simple_props.html.heex",
      view_url: "#{@url}/#{@dead_views}/simple_props.html.heex",
      raw_react_url: "#{@raw_url}/#{@react}/simple-props.jsx",
      react_url: "#{@url}/#{@react}/simple-props.jsx"
    }
  end

  def demo(:typescript) do
    %{
      view_type: "DeadView",
      raw_view_url: "#{@raw_url}#{@dead_views}/typescript.html.heex",
      view_url: "#{@url}#{@dead_views}/typescript.html.heex",
      raw_react_url: "#{@raw_url}#{@react}/typescript.tsx",
      react_url: "#{@url}#{@react}/typescript.tsx",
      react_language: "tsx"
    }
  end

  def demo(:lazy) do
    %{
      view_type: "DeadView",
      raw_view_url: "#{@raw_url}#{@dead_views}/lazy.html.heex",
      view_url: "#{@url}#{@dead_views}/lazy.html.heex",
      raw_react_url: "#{@raw_url}#{@react}/lazy.jsx",
      react_url: "#{@url}#{@react}/lazy.jsx"
    }
  end

  def demo(:counter) do
    %{
      raw_view_url: "#{@raw_url}#{@live_views}/counter.ex",
      view_url: "#{@url}#{@live_views}/counter.ex",
      view_language: "elixir",
      raw_react_url: "#{@raw_url}#{@react}/counter.jsx",
      react_url: "#{@url}#{@react}/counter.jsx"
    }
  end

  def demo(:log_list) do
    %{
      raw_view_url: "#{@raw_url}#{@live_views}/log_list.ex",
      view_url: "#{@url}#{@live_views}/log_list.ex",
      view_language: "elixir",
      raw_react_url: "#{@raw_url}#{@react}/log-list.jsx",
      react_url: "#{@url}#{@react}/log-list.jsx"
    }
  end

  def demo(:flash_sonner) do
    %{
      raw_view_url: "#{@raw_url}#{@live_views}/flash_sonner.ex",
      view_url: "#{@url}#{@live_views}/flash_sonner.ex",
      view_language: "elixir",
      raw_react_url: "#{@raw_url}#{@react}/flash-sonner.jsx",
      react_url: "#{@url}#{@react}/flash-sonner.jsx"
    }
  end

  def demo(:ssr) do
    %{
      raw_view_url: "#{@raw_url}#{@live_views}/ssr.ex",
      view_url: "#{@url}#{@live_views}/ssr.ex",
      view_language: "elixir",
      raw_react_url: "#{@raw_url}#{@react}/ssr.jsx",
      react_url: "#{@url}#{@react}/ssr.jsx"
    }
  end

  def demo(:hybrid_form) do
    %{
      raw_view_url: "#{@raw_url}#{@live_views}/hybrid_form.ex",
      view_url: "#{@url}#{@live_views}/hybrid_form.ex",
      view_language: "elixir",
      raw_react_url: "#{@raw_url}#{@react}/delay-slider.tsx",
      react_url: "#{@url}#{@react}/delay-slider.tsx"
    }
  end

  def demo(:slot) do
    %{
      raw_view_url: "#{@raw_url}#{@live_views}/slot.ex",
      view_url: "#{@url}#{@live_views}/slot.ex",
      view_language: "elixir",
      raw_react_url: "#{@raw_url}#{@react}/slot.tsx",
      react_url: "#{@url}#{@react}/slot.tsx"
    }
  end

  def demo(demo) do
    raise ArgumentError, "Unknown demo: #{inspect(demo)}"
  end
end

================
File: live_react_examples/priv/static/images/logo.svg
================
<?xml version="1.0" encoding="UTF-8"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->
<svg width="170.22mm" height="60.263mm" version="1.1" viewBox="0 0 170.22 60.263" xmlns="http://www.w3.org/2000/svg">
 <g transform="translate(-11.898 -31.072)">
  <g transform="matrix(.92733 0 0 .92733 24.719 40.162)" fill="#fd4f00">
   <path d="m26.371 33.477-0.552-0.1c-3.92-0.729-6.397-3.1-7.57-6.829-0.733-2.324 0.597-4.035 3.035-4.148 1.995-0.092 3.362 1.055 4.57 2.39 1.557 1.72 2.984 3.558 4.514 5.305 2.202 2.515 4.797 4.134 8.347 3.634 3.183-0.448 5.958-1.725 8.371-3.828 0.363-0.316 0.761-0.592 1.144-0.886l-0.241-0.284c-2.027 0.63-4.093 0.841-6.205 0.735-3.195-0.16-6.24-0.828-8.964-2.582-2.486-1.601-4.319-3.746-5.19-6.611-0.704-2.315 0.736-3.934 3.135-3.6 0.948 0.133 1.746 0.56 2.463 1.165 0.583 0.493 1.143 1.015 1.738 1.493 2.8 2.25 6.712 2.375 10.265-0.068-5.842-0.026-9.817-3.24-13.308-7.313-1.366-1.594-2.7-3.216-4.095-4.785-2.698-3.036-5.692-5.71-9.79-6.623-5.238-1.165-10.293-0.402-15.145 1.819-0.967 0.443-1.896 0.958-2.893 1.788 0.494 0 0.763 6e-3 1.032 0 2.446-0.064 4.28 1.023 5.602 3.024 0.962 1.457 1.415 3.104 1.761 4.798 0.513 2.515 0.247 5.078 0.544 7.605 0.761 6.494 4.08 11.026 10.26 13.346 2.267 0.852 4.591 1.135 7.172 0.555zm-15.62-29.625c-0.976 0.246-1.756-0.148-2.56-0.962 1.377-0.343 2.592-0.476 3.897-0.528-0.107 0.848-0.607 1.306-1.336 1.49zm32.002 37.924c-0.085-0.626-0.62-0.901-1.04-1.228-1.857-1.446-4.03-1.958-6.333-2-1.375-0.026-2.735-0.128-4.031-0.61-0.595-0.22-1.26-0.505-1.244-1.272 0.015-0.78 0.693-1 1.31-1.184 0.505-0.15 1.026-0.247 1.6-0.382-1.46-0.936-2.886-1.065-4.787-0.3-2.993 1.202-5.943 1.06-8.926-0.017-1.684-0.608-3.179-1.563-4.735-2.408l-0.077 0.057c1.29 2.115 3.034 3.817 5.004 5.271 3.793 2.8 7.936 4.471 12.784 3.73a66.714 66.714 0 0 1 4.722-0.556c1.98-0.16 3.866 0.398 5.753 0.899zm-9.14-30.345c-0.105-0.076-0.206-0.266-0.42-0.069 1.745 2.36 3.985 4.098 6.683 5.193 4.354 1.767 8.773 2.07 13.293 0.51 3.51-1.21 6.033-0.028 7.343 3.38 0.19-3.955-2.137-6.837-5.843-7.401-2.084-0.318-4.01 0.373-5.962 0.94-5.434 1.575-10.485 0.798-15.094-2.553zm27.085 15.425c0.708 0.059 1.416 0.123 2.124 0.185-1.6-1.405-3.55-1.517-5.523-1.404-3.003 0.17-5.167 1.903-7.14 3.972-1.739 1.824-3.31 3.87-5.903 4.604 0.043 0.078 0.054 0.117 0.066 0.117 0.35 5e-3 0.699 0.021 1.047 5e-3 3.768-0.17 7.317-0.965 10.14-3.7 0.89-0.86 1.685-1.817 2.544-2.71 0.716-0.746 1.584-1.159 2.645-1.07zm-8.753-4.67c-2.812 0.246-5.254 1.409-7.548 2.943-1.766 1.18-3.654 1.738-5.776 1.37-0.374-0.066-0.75-0.114-1.124-0.17l-0.013 0.156c0.135 0.07 0.265 0.151 0.405 0.207 0.354 0.14 0.702 0.308 1.07 0.395 4.083 0.971 7.992 0.474 11.516-1.803 2.221-1.435 4.521-1.707 7.013-1.336 0.252 0.038 0.503 0.083 0.756 0.107 0.234 0.022 0.479 0.255 0.795 3e-3 -2.179-1.574-4.526-2.096-7.094-1.872zm-10.049-9.544c1.475 0.051 2.943-0.142 4.486-1.059-0.452 0.04-0.643 0.04-0.827 0.076-2.126 0.424-4.033-0.04-5.733-1.383-0.623-0.493-1.257-0.974-1.889-1.457-2.503-1.914-5.374-2.555-8.514-2.5 0.05 0.154 0.054 0.26 0.108 0.315 3.417 3.455 7.371 5.836 12.369 6.008zm24.727 17.731c-2.114-2.097-4.952-2.367-7.578-0.537 1.738 0.078 3.043 0.632 4.101 1.728a13 13 0 0 0 1.182 1.106c1.6 1.29 4.311 1.352 5.896 0.155-1.861-0.726-1.861-0.726-3.601-2.452zm-21.058 16.06c-1.858-3.46-4.981-4.24-8.59-4.008a9.667 9.667 0 0 1 2.977 1.39c0.84 0.586 1.547 1.311 2.243 2.055 1.38 1.473 3.534 2.376 4.962 2.07-0.656-0.412-1.238-0.848-1.592-1.507zm0 0-6e-3 6e-3 -0.036-4e-3 0.021 0.018 0.012 0.053zm0 0a0.127 0.127 0 0 0 0.015 0.043c5e-3 8e-3 0.038 0 0.058-2e-3zm0 0-8e-3 0.01 5e-3 0.026 0.024 0.014z" fill="#fd4f00"/>
  </g>
  <path d="m158.79 52.42c-0.59559-0.205-1.2128-0.39896-1.8482-0.5824 0.10444-0.42626 0.2003-0.84699 0.28553-1.2606 1.399-6.7911 0.4843-12.262-2.6393-14.063-2.9951-1.7272-7.8934 0.07369-12.84 4.3789-0.47572 0.41398-0.95276 0.85231-1.4296 1.3117-0.31772-0.30393-0.63493-0.59763-0.95133-0.87857-5.1846-4.6035-10.381-6.5434-13.502-4.7369-2.9923 1.7322-3.8784 6.8755-2.619 13.311 0.12161 0.62165 0.26377 1.2565 0.42452 1.9019-0.7355 0.20879-1.4456 0.43136-2.1249 0.66815-6.0784 2.1192-9.9604 5.4405-9.9604 8.8856 0 3.5581 4.1673 7.127 10.498 9.2909 0.49963 0.17076 1.0181 0.33224 1.5523 0.48553-0.17342 0.6981-0.32426 1.3822-0.45088 2.0494-1.2008 6.3243-0.26306 11.346 2.7212 13.067 3.0825 1.7776 8.2558-0.04959 13.293-4.4529 0.39815-0.34807 0.79774-0.7172 1.198-1.1041 0.51885 0.49963 1.0369 0.97248 1.5521 1.416 4.8794 4.1989 9.6986 5.8944 12.68 4.1683 3.0794-1.7827 4.0802-7.1772 2.7809-13.741-0.0992-0.50126-0.21471-1.0134-0.3444-1.5346 0.3633-0.10741 0.71996-0.21829 1.0677-0.33356 6.5818-2.1807 10.864-5.7061 10.864-9.3118 0-3.4576-4.0072-6.8013-10.208-8.9359zm-1.4276 15.92c-0.31394 0.10393-0.63606 0.20439-0.96431 0.30178-0.72661-2.3003-1.7073-4.7463-2.9073-7.2735 1.1452-2.467 2.0879-4.8817 2.7942-7.1671 0.58732 0.16995 1.1574 0.3492 1.7066 0.53836 5.3129 1.829 8.5537 4.5332 8.5537 6.6168 0 2.2195-3.5 5.1006-9.1829 6.9837zm-2.358 4.6725c0.57454 2.9022 0.6566 5.5262 0.27602 7.5774-0.34194 1.8432-1.0296 3.0721-1.8799 3.5642-1.8094 1.0473-5.6786-0.31405-9.8516-3.905-0.47837-0.41164-0.96022-0.85118-1.4436-1.3164 1.6177-1.7693 3.2346-3.8262 4.8126-6.1105 2.7755-0.24629 5.3977-0.64893 7.7757-1.1986 0.11712 0.47245 0.22116 0.9358 0.31078 1.3888zm-23.846 10.961c-1.7678 0.62431-3.1757 0.64219-4.0268 0.15146-1.811-1.0445-2.5639-5.0765-1.5369-10.485 0.11763-0.6194 0.25763-1.2557 0.419-1.906 2.3519 0.52007 4.9549 0.89431 7.737 1.1199 1.5886 2.2353 3.2521 4.2899 4.9285 6.089-0.36626 0.35359-0.7311 0.69022-1.0939 1.0074-2.2275 1.9471-4.4598 3.3286-6.427 4.0234zm-8.2818-15.647c-2.7995-0.95684-5.1115-2.2005-6.6962-3.5575-1.424-1.2195-2.1429-2.4302-2.1429-3.4126 0-2.0906 3.1168-4.7572 8.3152-6.5696 0.63075-0.21992 1.291-0.42718 1.9762-0.62185 0.71843 2.337 1.6609 4.7804 2.7982 7.2511-1.152 2.5074-2.1079 4.9898-2.8334 7.3541-0.48849-0.14042-0.96175-0.2882-1.4171-0.44374zm2.7761-18.897c-1.079-5.5142-0.36239-9.674 1.4408-10.718 1.9208-1.112 6.1681 0.47347 10.645 4.4483 0.28615 0.25405 0.57342 0.51996 0.8615 0.79507-1.6681 1.7912-3.3164 3.8304-4.8909 6.0525-2.7002 0.25027-5.2849 0.65231-7.6613 1.1907-0.14941-0.60101-0.28175-1.1915-0.39467-1.7688zm24.765 6.1152c-0.5681-0.98127-1.1513-1.9393-1.7459-2.8713 1.8318 0.23157 3.5869 0.53898 5.2351 0.91516-0.49482 1.5859-1.1116 3.244-1.8376 4.9438-0.52078-0.98873-1.0716-1.9856-1.6517-2.9877zm-10.099-9.8368c1.1313 1.2256 2.2642 2.594 3.3786 4.0787-1.1229-0.05306-2.2597-0.08061-3.406-0.08061-1.1354 0-2.2638 0.02696-3.3798 0.07908 1.1154-1.4709 2.2582-2.8374 3.4072-4.0772zm-10.164 9.8537c-0.56748 0.98404-1.1081 1.9755-1.6207 2.9689-0.71424-1.6939-1.3253-3.3595-1.8244-4.9679 1.6381-0.36657 3.3849-0.66631 5.2051-0.89348-0.60295 0.94049-1.191 1.9056-1.76 2.8923zm1.8124 14.657c-1.8806-0.20981-3.6537-0.49411-5.2913-0.85057 0.50709-1.6371 1.1316-3.3383 1.861-5.0686 0.51393 0.99262 1.0567 1.9845 1.6276 2.9707h1.1e-4c0.58158 1.0047 1.1841 1.9888 1.8026 2.9485zm8.4194 6.9592c-1.1625-1.2542-2.322-2.6416-3.4544-4.134 1.0993 0.04314 2.2201 0.06518 3.3591 0.06518 1.1702 0 2.3271-0.02636 3.4657-0.07705-1.118 1.5192-2.2468 2.9088-3.3705 4.1458zm11.707-12.967c0.76738 1.7491 1.4143 3.4414 1.9279 5.0506-1.6646 0.37975-3.4619 0.68562-5.3556 0.9129 0.596-0.94449 1.1843-1.919 1.7624-2.9214 0.58486-1.0142 1.1402-2.0299 1.6653-3.042zm-3.7898 1.8167c-0.89747 1.5561-1.8189 3.0416-2.7542 4.4438-1.7037 0.12181-3.4638 0.18456-5.2577 0.18456-1.7867 0-3.5246-0.05552-5.1981-0.16413-0.9731-1.4206-1.9145-2.9105-2.8063-4.4509h2.1e-4c-0.8894-1.5362-1.708-3.0854-2.4497-4.6258 0.74152-1.5441 1.558-3.095 2.4422-4.6284l-2.1e-4 3.13e-4c0.88664-1.5375 1.8198-3.0202 2.7839-4.4319 1.7075-0.12907 3.4584-0.19641 5.2279-0.19641h1.1e-4c1.7775 0 3.5306 0.0679 5.2376 0.19805 0.94939 1.4014 1.8762 2.8792 2.7663 4.417 0.90023 1.555 1.7272 3.0956 2.475 4.6065-0.74561 1.5369-1.5707 3.093-2.467 4.6473zm5.0596-27.389c1.9226 1.1087 2.6702 5.5801 1.4623 11.444-0.077 0.37414-0.16382 0.75522-0.25804 1.1414-2.382-0.54961-4.9685-0.95859-7.6766-1.2126-1.5776-2.2465-3.2124-4.2889-4.8533-6.0571 0.44118-0.42442 0.88174-0.82911 1.3205-1.211 4.2386-3.6887 8.2002-5.1451 10.005-4.1042zm-13.072 17.591c2.8314 0 5.1268 2.2953 5.1268 5.1268 0 2.8314-2.2954 5.1268-5.1268 5.1268s-5.1268-2.2954-5.1268-5.1268c0-2.8315 2.2954-5.1268 5.1268-5.1268z" fill="#00d8ff" stroke-width=".22427"/>
  <rect x="98.063" y="53.367" width="2.1191" height="14.502" fill="#fd4f00" stroke-width="0" style="paint-order:markers stroke fill"/>
  <rect transform="rotate(89.974)" x="59.036" y="-106.43" width="2.1191" height="14.502" fill="#fd4f00" stroke-width="0" style="paint-order:markers stroke fill"/>
 </g>
</svg>

================
File: live_react_examples/priv/static/robots.txt
================
# See https://www.robotstxt.org/robotstxt.html for documentation on how to use the robots.txt file
#
# To ban all spiders from the entire site uncomment the next two lines:
# User-agent: *
# Disallow: /

================
File: live_react_examples/rel/overlays/bin/server
================
#!/bin/sh
set -eu

cd -P -- "$(dirname -- "$0")"
PHX_SERVER=true exec ./live_react_examples start

================
File: live_react_examples/rel/overlays/bin/server.bat
================
set PHX_SERVER=true
call "%~dp0\live_react_examples" start

================
File: live_react_examples/rel/env.sh.eex
================
#!/bin/sh

# configure node for distributed erlang with IPV6 support
export ERL_AFLAGS="-proto_dist inet6_tcp"
export ECTO_IPV6="true"
export DNS_CLUSTER_QUERY="${FLY_APP_NAME}.internal"
export RELEASE_DISTRIBUTION="name"
export RELEASE_NODE="${FLY_APP_NAME}-${FLY_IMAGE_REF##*-}@${FLY_PRIVATE_IP}"

# Uncomment to send crash dumps to stderr
# This can be useful for debugging, but may log sensitive information
# export ERL_CRASH_DUMP=/dev/stderr
# export ERL_CRASH_DUMP_BYTES=4096

================
File: live_react_examples/test/live_react_examples_web/controllers/error_html_test.exs
================
defmodule LiveReactExamplesWeb.ErrorHTMLTest do
  use LiveReactExamplesWeb.ConnCase, async: true

  # Bring render_to_string/4 for testing custom views
  import Phoenix.Template

  test "renders 404.html" do
    assert render_to_string(LiveReactExamplesWeb.ErrorHTML, "404", "html", []) == "Not Found"
  end

  test "renders 500.html" do
    assert render_to_string(LiveReactExamplesWeb.ErrorHTML, "500", "html", []) ==
             "Internal Server Error"
  end
end

================
File: live_react_examples/test/live_react_examples_web/controllers/error_json_test.exs
================
defmodule LiveReactExamplesWeb.ErrorJSONTest do
  use LiveReactExamplesWeb.ConnCase, async: true

  test "renders 404" do
    assert LiveReactExamplesWeb.ErrorJSON.render("404.json", %{}) == %{
             errors: %{detail: "Not Found"}
           }
  end

  test "renders 500" do
    assert LiveReactExamplesWeb.ErrorJSON.render("500.json", %{}) ==
             %{errors: %{detail: "Internal Server Error"}}
  end
end

================
File: live_react_examples/test/live_react_examples_web/controllers/page_controller_test.exs
================
defmodule LiveReactExamplesWeb.PageControllerTest do
  use LiveReactExamplesWeb.ConnCase

  test "GET /", %{conn: conn} do
    conn = get(conn, ~p"/")
    assert html_response(conn, 200) =~ "Peace of mind from prototype to production"
  end
end

================
File: live_react_examples/test/support/conn_case.ex
================
defmodule LiveReactExamplesWeb.ConnCase do
  @moduledoc """
  This module defines the test case to be used by
  tests that require setting up a connection.

  Such tests rely on `Phoenix.ConnTest` and also
  import other functionality to make it easier
  to build common data structures and query the data layer.

  Finally, if the test case interacts with the database,
  we enable the SQL sandbox, so changes done to the database
  are reverted at the end of every test. If you are using
  PostgreSQL, you can even run database tests asynchronously
  by setting `use LiveReactExamplesWeb.ConnCase, async: true`, although
  this option is not recommended for other databases.
  """

  use ExUnit.CaseTemplate

  using do
    quote do
      # The default endpoint for testing
      @endpoint LiveReactExamplesWeb.Endpoint

      use LiveReactExamplesWeb, :verified_routes

      # Import conveniences for testing with connections
      import Plug.Conn
      import Phoenix.ConnTest
      import LiveReactExamplesWeb.ConnCase
    end
  end

  setup _tags do
    {:ok, conn: Phoenix.ConnTest.build_conn()}
  end
end

================
File: live_react_examples/test/test_helper.exs
================
ExUnit.start()

================
File: live_react_examples/.dockerignore
================
# This file excludes paths from the Docker build context.
#
# By default, Docker's build context includes all files (and folders) in the
# current directory. Even if a file isn't copied into the container it is still sent to
# the Docker daemon.
#
# There are multiple reasons to exclude files from the build context:
#
# 1. Prevent nested folders from being copied into the container (ex: exclude
#    /assets/node_modules when copying /assets)
# 2. Reduce the size of the build context and improve build time (ex. /build, /deps, /doc)
# 3. Avoid sending files containing sensitive information
#
# More information on using .dockerignore is available here:
# https://docs.docker.com/engine/reference/builder/#dockerignore-file

.dockerignore

# Ignore git, but keep git HEAD and refs to access current commit hash if needed:
#
# $ cat .git/HEAD | awk '{print ".git/"$2}' | xargs cat
# d0b8727759e1e0e7aa3d41707d12376e373d5ecc
.git
!.git/HEAD
!.git/refs

# Common development/test artifacts
/cover/
/doc/
/test/
/tmp/
.elixir_ls

# Mix artifacts
/_build/
/deps/
*.ez

# Generated on crash by the VM
erl_crash.dump

# Static artifacts - These should be fetched and built inside the Docker image
/assets/node_modules/
/priv/static/assets/
/priv/static/cache_manifest.json

================
File: live_react_examples/.formatter.exs
================
[
  import_deps: [:phoenix],
  plugins: [Phoenix.LiveView.HTMLFormatter],
  inputs: ["*.{heex,ex,exs}", "{config,lib,test}/**/*.{heex,ex,exs}"]
]

================
File: live_react_examples/.gitignore
================
# The directory Mix will write compiled artifacts to.
/_build/

# If you run "mix test --cover", coverage assets end up here.
/cover/

# The directory Mix downloads your dependencies sources to.
/deps/

# Where 3rd-party dependencies like ExDoc output generated docs.
/doc/

# Ignore .fetch files in case you like to edit your project deps locally.
/.fetch

# If the VM crashes, it generates a dump, let's ignore it too.
erl_crash.dump

# Also ignore archive artifacts (built via "mix archive.build").
*.ez

# Temporary files, for example, from tests.
/tmp/

# Ignore package tarball (built via "mix hex.build").
live_react_examples-*.tar

# Ignore assets that are produced by build tools.
/priv/static/assets/
/priv/react-components/

# Ignore digested assets cache.
/priv/static/cache_manifest.json

# In case you use Node.js/npm, you want to ignore these.
npm-debug.log
/assets/node_modules/
/assets/meta.json
/assets/tsconfig.tsbuildinfo

================
File: live_react_examples/.prettierignore
================
priv/
live_react_examples/deps/
deps/
doc/

================
File: live_react_examples/Dockerfile
================
# Find eligible builder and runner images on Docker Hub. We use Ubuntu/Debian
# instead of Alpine to avoid DNS resolution issues in production.
#
# https://hub.docker.com/r/hexpm/elixir/tags?page=1&name=ubuntu
# https://hub.docker.com/_/ubuntu?tab=tags
#
# This file is based on these images:
#
#   - https://hub.docker.com/r/hexpm/elixir/tags - for the build image
#   - https://hub.docker.com/_/debian?tab=tags&page=1&name=bullseye-20240612-slim - for the release image
#   - https://pkgs.org/ - resource for finding needed packages
#   - Ex: hexpm/elixir:1.17.1-erlang-26.2.5.1-debian-bullseye-20240612-slim
#
ARG ELIXIR_VERSION=1.17.3
ARG OTP_VERSION=27.1.1
ARG DEBIAN_VERSION=bookworm-20240926

ARG BUILDER_IMAGE="hexpm/elixir:${ELIXIR_VERSION}-erlang-${OTP_VERSION}-debian-${DEBIAN_VERSION}"
ARG RUNNER_IMAGE="debian:${DEBIAN_VERSION}"

FROM ${BUILDER_IMAGE} as builder

# install build dependencies
RUN apt-get update -y && apt-get install -y build-essential git curl \
    && apt-get clean && rm -f /var/lib/apt/lists/*_*

# install nodejs for build stage
RUN curl -fsSL https://deb.nodesource.com/setup_19.x | bash - && apt-get install -y nodejs

# prepare build dir
WORKDIR /app

# install hex + rebar
RUN mix local.hex --force && \
    mix local.rebar --force

# set build ENV
ENV MIX_ENV="prod"

# install mix dependencies
COPY mix.exs mix.lock ./
RUN mix deps.get --only $MIX_ENV
RUN mkdir config

# copy compile-time config files before we compile dependencies
# to ensure any relevant config change will trigger the dependencies
# to be re-compiled.
COPY config/config.exs config/${MIX_ENV}.exs config/
RUN mix deps.compile

COPY priv priv

COPY lib lib

COPY assets assets

# Install npm packages
RUN npm i --prefix assets --no-cache --progress=false --no-audit --loglevel=error

# compile assets
RUN mix assets.deploy

# Compile the release
RUN mix compile

# Changes to config/runtime.exs don't require recompiling the code
COPY config/runtime.exs config/

COPY rel rel
RUN mix release

# start a new build stage so that the final image will only contain
# the compiled release and other runtime necessities
FROM ${RUNNER_IMAGE}

RUN apt-get update -y && \
  apt-get install -y libstdc++6 openssl libncurses5 locales ca-certificates curl \
  && apt-get clean && rm -f /var/lib/apt/lists/*_*

# install nodejs for production environment
RUN curl -fsSL https://deb.nodesource.com/setup_19.x | bash - && apt-get install -y nodejs

# Set the locale
RUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen

ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

WORKDIR "/app"
RUN chown nobody /app

# set runner ENV
ENV MIX_ENV="prod"

# Only copy the final release from the build stage
COPY --from=builder --chown=nobody:root /app/_build/${MIX_ENV}/rel/live_react_examples ./

USER nobody

# If using an environment that doesn't automatically reap zombie processes, it is
# advised to add an init process such as tini via `apt-get install`
# above and adding an entrypoint. See https://github.com/krallin/tini for details
# ENTRYPOINT ["/tini", "--"]

CMD ["/app/bin/server"]

================
File: live_react_examples/fly.toml
================
# fly.toml app configuration file generated for live-react-examples on 2024-06-29T19:14:48+02:00
#
# See https://fly.io/docs/reference/configuration/ for information about how to use this file.
#

app = 'live-react-examples'
primary_region = 'cdg'
kill_signal = 'SIGTERM'

[build]

[env]
  PHX_HOST = 'live-react-examples.fly.dev'
  PORT = '8080'

[http_service]
  internal_port = 8080
  force_https = true
  auto_stop_machines = true
  auto_start_machines = true
  min_machines_running = 0
  processes = ['app']

  [http_service.concurrency]
    type = 'connections'
    hard_limit = 1000
    soft_limit = 1000

[[vm]]
  size = 'shared-cpu-1x'

================
File: live_react_examples/mix.exs
================
defmodule LiveReactExamples.MixProject do
  use Mix.Project

  def project do
    [
      app: :live_react_examples,
      version: "0.1.0",
      elixir: "~> 1.14",
      elixirc_paths: elixirc_paths(Mix.env()),
      start_permanent: Mix.env() == :prod,
      aliases: aliases(),
      deps: deps()
    ]
  end

  # Configuration for the OTP application.
  #
  # Type `mix help compile.app` for more information.
  def application do
    [
      mod: {LiveReactExamples.Application, []},
      extra_applications: [:logger, :runtime_tools]
    ]
  end

  # Specifies which paths to compile per environment.
  defp elixirc_paths(:test), do: ["lib", "test/support"]
  defp elixirc_paths(_), do: ["lib"]

  # Specifies your project dependencies.
  #
  # Type `mix help deps` for examples and options.
  defp deps do
    [
      {:phoenix, "~> 1.7.14"},
      {:phoenix_html, "~> 4.1"},
      {:phoenix_live_reload, "~> 1.2", only: :dev},
      {:nodejs, "~> 3.1"},
      {:phoenix_live_view, "~> 1.0.0"},
      {:floki, ">= 0.30.0", only: :test},
      {:heroicons,
       github: "tailwindlabs/heroicons",
       tag: "v2.1.1",
       sparse: "optimized",
       app: false,
       compile: false,
       depth: 1},
      {:telemetry_metrics, "~> 1.0"},
      {:telemetry_poller, "~> 1.0"},
      {:jason, "~> 1.2"},
      {:dns_cluster, "~> 0.1.1"},
      {:bandit, "~> 1.5"},
      # For development
      {:live_react, path: ".."}
      # {:live_react, "~> 1.0.0-rc.2"}
    ]
  end

  # Aliases are shortcuts or tasks specific to the current project.
  # For example, to install project dependencies and perform other setup tasks, run:
  #
  #     $ mix setup
  #
  # See the documentation for `Mix` for more info on aliases.
  defp aliases do
    [
      setup: ["deps.get", "assets.setup", "assets.build"],
      "assets.setup": ["cmd --cd assets npm install"],
      "assets.build": [
        "cmd --cd assets npm run build",
        "cmd --cd assets npm run build-server"
      ],
      "assets.deploy": [
        "cmd --cd assets npm run build",
        "cmd --cd assets npm run build-server",
        "phx.digest"
      ]
    ]
  end
end

================
File: live_react_examples/mix.lock
================
%{
  "bandit": {:hex, :bandit, "1.6.1", "9e01b93d72ddc21d8c576a704949e86ee6cde7d11270a1d3073787876527a48f", [:mix], [{:hpax, "~> 1.0", [hex: :hpax, repo: "hexpm", optional: false]}, {:plug, "~> 1.14", [hex: :plug, repo: "hexpm", optional: false]}, {:telemetry, "~> 0.4 or ~> 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}, {:thousand_island, "~> 1.0", [hex: :thousand_island, repo: "hexpm", optional: false]}, {:websock, "~> 0.5", [hex: :websock, repo: "hexpm", optional: false]}], "hexpm", "5a904bf010ea24b67979835e0507688e31ac873d4ffc8ed0e5413e8d77455031"},
  "castore": {:hex, :castore, "1.0.10", "43bbeeac820f16c89f79721af1b3e092399b3a1ecc8df1a472738fd853574911", [:mix], [], "hexpm", "1b0b7ea14d889d9ea21202c43a4fa015eb913021cb535e8ed91946f4b77a8848"},
  "dns_cluster": {:hex, :dns_cluster, "0.1.3", "0bc20a2c88ed6cc494f2964075c359f8c2d00e1bf25518a6a6c7fd277c9b0c66", [:mix], [], "hexpm", "46cb7c4a1b3e52c7ad4cbe33ca5079fbde4840dedeafca2baf77996c2da1bc33"},
  "esbuild": {:hex, :esbuild, "0.8.1", "0cbf919f0eccb136d2eeef0df49c4acf55336de864e63594adcea3814f3edf41", [:mix], [{:castore, ">= 0.0.0", [hex: :castore, repo: "hexpm", optional: false]}, {:jason, "~> 1.4", [hex: :jason, repo: "hexpm", optional: false]}], "hexpm", "25fc876a67c13cb0a776e7b5d7974851556baeda2085296c14ab48555ea7560f"},
  "file_system": {:hex, :file_system, "1.0.0", "b689cc7dcee665f774de94b5a832e578bd7963c8e637ef940cd44327db7de2cd", [:mix], [], "hexpm", "6752092d66aec5a10e662aefeed8ddb9531d79db0bc145bb8c40325ca1d8536d"},
  "floki": {:hex, :floki, "0.37.0", "b83e0280bbc6372f2a403b2848013650b16640cd2470aea6701f0632223d719e", [:mix], [], "hexpm", "516a0c15a69f78c47dc8e0b9b3724b29608aa6619379f91b1ffa47109b5d0dd3"},
  "heroicons": {:git, "https://github.com/tailwindlabs/heroicons.git", "88ab3a0d790e6a47404cba02800a6b25d2afae50", [tag: "v2.1.1", sparse: "optimized", depth: 1]},
  "hpax": {:hex, :hpax, "1.0.1", "c857057f89e8bd71d97d9042e009df2a42705d6d690d54eca84c8b29af0787b0", [:mix], [], "hexpm", "4e2d5a4f76ae1e3048f35ae7adb1641c36265510a2d4638157fbcb53dda38445"},
  "jason": {:hex, :jason, "1.4.4", "b9226785a9aa77b6857ca22832cffa5d5011a667207eb2a0ad56adb5db443b8a", [:mix], [{:decimal, "~> 1.0 or ~> 2.0", [hex: :decimal, repo: "hexpm", optional: true]}], "hexpm", "c5eb0cab91f094599f94d55bc63409236a8ec69a21a67814529e8d5f6cc90b3b"},
  "live_react": {:hex, :live_react, "1.0.0-rc.2", "487bde279fc1cf7f6bbd6a0ee7d20e9482c03f82ffc81ae7fdeb6b87fba4912a", [:mix], [{:jason, "~> 1.2", [hex: :jason, repo: "hexpm", optional: false]}, {:nodejs, "~> 3.1", [hex: :nodejs, repo: "hexpm", optional: true]}, {:phoenix, ">= 1.7.0", [hex: :phoenix, repo: "hexpm", optional: false]}, {:phoenix_html, ">= 3.3.1", [hex: :phoenix_html, repo: "hexpm", optional: false]}, {:phoenix_live_view, ">= 0.18.0", [hex: :phoenix_live_view, repo: "hexpm", optional: false]}, {:telemetry, "~> 0.4 or ~> 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "c5a9138fdb62342804d2b76b4e2a70d0ba17e9b488aac899fb0fe7e72f164740"},
  "mime": {:hex, :mime, "2.0.6", "8f18486773d9b15f95f4f4f1e39b710045fa1de891fada4516559967276e4dc2", [:mix], [], "hexpm", "c9945363a6b26d747389aac3643f8e0e09d30499a138ad64fe8fd1d13d9b153e"},
  "nodejs": {:hex, :nodejs, "3.1.2", "a4dc114102782dcdc5fc13989398d19e594dd4e3a69181c8a8d54d08f4f950a4", [:mix], [{:jason, "~> 1.0", [hex: :jason, repo: "hexpm", optional: false]}, {:poolboy, "~> 1.5.1", [hex: :poolboy, repo: "hexpm", optional: false]}, {:ssl_verify_fun, "~> 1.1.7", [hex: :ssl_verify_fun, repo: "hexpm", optional: false]}], "hexpm", "7b01eee72c16d919b122f7096918abe9d6062d3cc299afe694e72412bbe90c92"},
  "phoenix": {:hex, :phoenix, "1.7.17", "2fcdceecc6fb90bec26fab008f96abbd0fd93bc9956ec7985e5892cf545152ca", [:mix], [{:castore, ">= 0.0.0", [hex: :castore, repo: "hexpm", optional: false]}, {:jason, "~> 1.0", [hex: :jason, repo: "hexpm", optional: true]}, {:phoenix_pubsub, "~> 2.1", [hex: :phoenix_pubsub, repo: "hexpm", optional: false]}, {:phoenix_template, "~> 1.0", [hex: :phoenix_template, repo: "hexpm", optional: false]}, {:phoenix_view, "~> 2.0", [hex: :phoenix_view, repo: "hexpm", optional: true]}, {:plug, "~> 1.14", [hex: :plug, repo: "hexpm", optional: false]}, {:plug_cowboy, "~> 2.7", [hex: :plug_cowboy, repo: "hexpm", optional: true]}, {:plug_crypto, "~> 1.2 or ~> 2.0", [hex: :plug_crypto, repo: "hexpm", optional: false]}, {:telemetry, "~> 0.4 or ~> 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}, {:websock_adapter, "~> 0.5.3", [hex: :websock_adapter, repo: "hexpm", optional: false]}], "hexpm", "50e8ad537f3f7b0efb1509b2f75b5c918f697be6a45d48e49a30d3b7c0e464c9"},
  "phoenix_html": {:hex, :phoenix_html, "4.1.1", "4c064fd3873d12ebb1388425a8f2a19348cef56e7289e1998e2d2fa758aa982e", [:mix], [], "hexpm", "f2f2df5a72bc9a2f510b21497fd7d2b86d932ec0598f0210fed4114adc546c6f"},
  "phoenix_live_reload": {:hex, :phoenix_live_reload, "1.5.3", "f2161c207fda0e4fb55165f650f7f8db23f02b29e3bff00ff7ef161d6ac1f09d", [:mix], [{:file_system, "~> 0.3 or ~> 1.0", [hex: :file_system, repo: "hexpm", optional: false]}, {:phoenix, "~> 1.4", [hex: :phoenix, repo: "hexpm", optional: false]}], "hexpm", "b4ec9cd73cb01ff1bd1cac92e045d13e7030330b74164297d1aee3907b54803c"},
  "phoenix_live_view": {:hex, :phoenix_live_view, "1.0.0", "3a10dfce8f87b2ad4dc65de0732fc2a11e670b2779a19e8d3281f4619a85bce4", [:mix], [{:floki, "~> 0.36", [hex: :floki, repo: "hexpm", optional: true]}, {:jason, "~> 1.0", [hex: :jason, repo: "hexpm", optional: true]}, {:phoenix, "~> 1.6.15 or ~> 1.7.0", [hex: :phoenix, repo: "hexpm", optional: false]}, {:phoenix_html, "~> 3.3 or ~> 4.0", [hex: :phoenix_html, repo: "hexpm", optional: false]}, {:phoenix_template, "~> 1.0", [hex: :phoenix_template, repo: "hexpm", optional: false]}, {:phoenix_view, "~> 2.0", [hex: :phoenix_view, repo: "hexpm", optional: true]}, {:plug, "~> 1.15", [hex: :plug, repo: "hexpm", optional: false]}, {:telemetry, "~> 0.4.2 or ~> 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "254caef0028765965ca6bd104cc7d68dcc7d57cc42912bef92f6b03047251d99"},
  "phoenix_pubsub": {:hex, :phoenix_pubsub, "2.1.3", "3168d78ba41835aecad272d5e8cd51aa87a7ac9eb836eabc42f6e57538e3731d", [:mix], [], "hexpm", "bba06bc1dcfd8cb086759f0edc94a8ba2bc8896d5331a1e2c2902bf8e36ee502"},
  "phoenix_template": {:hex, :phoenix_template, "1.0.4", "e2092c132f3b5e5b2d49c96695342eb36d0ed514c5b252a77048d5969330d639", [:mix], [{:phoenix_html, "~> 2.14.2 or ~> 3.0 or ~> 4.0", [hex: :phoenix_html, repo: "hexpm", optional: true]}], "hexpm", "2c0c81f0e5c6753faf5cca2f229c9709919aba34fab866d3bc05060c9c444206"},
  "plug": {:hex, :plug, "1.16.1", "40c74619c12f82736d2214557dedec2e9762029b2438d6d175c5074c933edc9d", [:mix], [{:mime, "~> 1.0 or ~> 2.0", [hex: :mime, repo: "hexpm", optional: false]}, {:plug_crypto, "~> 1.1.1 or ~> 1.2 or ~> 2.0", [hex: :plug_crypto, repo: "hexpm", optional: false]}, {:telemetry, "~> 0.4.3 or ~> 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "a13ff6b9006b03d7e33874945b2755253841b238c34071ed85b0e86057f8cddc"},
  "plug_crypto": {:hex, :plug_crypto, "2.1.0", "f44309c2b06d249c27c8d3f65cfe08158ade08418cf540fd4f72d4d6863abb7b", [:mix], [], "hexpm", "131216a4b030b8f8ce0f26038bc4421ae60e4bb95c5cf5395e1421437824c4fa"},
  "poolboy": {:hex, :poolboy, "1.5.2", "392b007a1693a64540cead79830443abf5762f5d30cf50bc95cb2c1aaafa006b", [:rebar3], [], "hexpm", "dad79704ce5440f3d5a3681c8590b9dc25d1a561e8f5a9c995281012860901e3"},
  "ssl_verify_fun": {:hex, :ssl_verify_fun, "1.1.7", "354c321cf377240c7b8716899e182ce4890c5938111a1296add3ec74cf1715df", [:make, :mix, :rebar3], [], "hexpm", "fe4c190e8f37401d30167c8c405eda19469f34577987c76dde613e838bbc67f8"},
  "tailwind": {:hex, :tailwind, "0.2.3", "277f08145d407de49650d0a4685dc062174bdd1ae7731c5f1da86163a24dfcdb", [:mix], [{:castore, ">= 0.0.0", [hex: :castore, repo: "hexpm", optional: false]}], "hexpm", "8e45e7a34a676a7747d04f7913a96c770c85e6be810a1d7f91e713d3a3655b5d"},
  "telemetry": {:hex, :telemetry, "1.3.0", "fedebbae410d715cf8e7062c96a1ef32ec22e764197f70cda73d82778d61e7a2", [:rebar3], [], "hexpm", "7015fc8919dbe63764f4b4b87a95b7c0996bd539e0d499be6ec9d7f3875b79e6"},
  "telemetry_metrics": {:hex, :telemetry_metrics, "1.0.0", "29f5f84991ca98b8eb02fc208b2e6de7c95f8bb2294ef244a176675adc7775df", [:mix], [{:telemetry, "~> 0.4 or ~> 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "f23713b3847286a534e005126d4c959ebcca68ae9582118ce436b521d1d47d5d"},
  "telemetry_poller": {:hex, :telemetry_poller, "1.1.0", "58fa7c216257291caaf8d05678c8d01bd45f4bdbc1286838a28c4bb62ef32999", [:rebar3], [{:telemetry, "~> 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "9eb9d9cbfd81cbd7cdd24682f8711b6e2b691289a0de6826e58452f28c103c8f"},
  "thousand_island": {:hex, :thousand_island, "1.3.7", "1da7598c0f4f5f50562c097a3f8af308ded48cd35139f0e6f17d9443e4d0c9c5", [:mix], [{:telemetry, "~> 0.4 or ~> 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "0139335079953de41d381a6134d8b618d53d084f558c734f2662d1a72818dd12"},
  "websock": {:hex, :websock, "0.5.3", "2f69a6ebe810328555b6fe5c831a851f485e303a7c8ce6c5f675abeb20ebdadc", [:mix], [], "hexpm", "6105453d7fac22c712ad66fab1d45abdf049868f253cf719b625151460b8b453"},
  "websock_adapter": {:hex, :websock_adapter, "0.5.8", "3b97dc94e407e2d1fc666b2fb9acf6be81a1798a2602294aac000260a7c4a47d", [:mix], [{:bandit, ">= 0.6.0", [hex: :bandit, repo: "hexpm", optional: true]}, {:plug, "~> 1.14", [hex: :plug, repo: "hexpm", optional: false]}, {:plug_cowboy, "~> 2.6", [hex: :plug_cowboy, repo: "hexpm", optional: true]}, {:websock, "~> 0.5", [hex: :websock, repo: "hexpm", optional: false]}], "hexpm", "315b9a1865552212b5f35140ad194e67ce31af45bcee443d4ecb96b5fd3f3782"},
}

================
File: live_react_examples/README.md
================
# LiveReactExamples

To start your Phoenix server:

- Run `mix setup` to install and setup dependencies
- Start Phoenix endpoint with `mix phx.server` or inside IEx with `iex -S mix phx.server`

Now you can visit [`localhost:4000`](http://localhost:4000) from your browser.

Ready to run in production? Please [check our deployment guides](https://hexdocs.pm/phoenix/deployment.html).

## Learn more

- Official website: https://www.phoenixframework.org/
- Guides: https://hexdocs.pm/phoenix/overview.html
- Docs: https://hexdocs.pm/phoenix
- Forum: https://elixirforum.com/c/phoenix-forum
- Source: https://github.com/phoenixframework/phoenix

================
File: test/live_react_test.exs
================
defmodule LiveReactTest do
  use ExUnit.Case
  doctest LiveReact

  test "greets the world" do
    assert LiveReact.hello() == :world
  end
end

================
File: test/test_helper.exs
================
ExUnit.start()

================
File: .formatter.exs
================
# Used by "mix format"
[
  inputs: ["{mix,.formatter}.exs", "{config,lib,test}/**/*.{ex,exs}"]
]

================
File: .gitignore
================
# The directory Mix will write compiled artifacts to.
/_build/

# If you run "mix test --cover", coverage assets end up here.
/cover/

# The directory Mix downloads your dependencies sources to.
/deps/

# Where third-party dependencies like ExDoc output generated docs.
/doc/

# Ignore .fetch files in case you like to edit your project deps locally.
/.fetch

# If the VM crashes, it generates a dump, let's ignore it too.
erl_crash.dump

# Also ignore archive artifacts (built via "mix archive.build").
*.ez

# Ignore package tarball (built via "mix hex.build").
live_react-*.tar

# Temporary files, for example, from tests.
/tmp/

# Ignore node_modules
/node_modules/

================
File: .prettierignore
================
priv/
live_react_examples/deps/
deps/
doc/
.elixir_ls
CHANGELOG.md

================
File: CHANGELOG.md
================
# Change Log

All notable changes to this project will be documented in this file.
See [Conventional Commits](Https://conventionalcommits.org) for commit guidelines.

<!-- changelog -->

## [v1.0.0-rc.3](https://github.com/mrdotb/live_react/compare/v1.0.0-rc.2...v1.0.0-rc.3) (2024-12-08)


### Features:

* support inner_block slot

## [v1.0.0-rc.2](https://github.com/mrdotb/live_react/compare/v1.0.0-rc.1...v1.0.0-rc.2) (2024-12-01)




### Features:

* Added SSR duration logging to example app

### Bug Fixes:

* rename react folder to react-components to prevent Vite error

## [v1.0.0-rc.1](https://github.com/mrdotb/live_react/compare/v1.0.0-rc.0...v1.0.0-rc.1) (2024-10-12)




### Bug Fixes:

* missing files in mix.exs to ship the js

## [v1.0.0-rc.0](https://github.com/mrdotb/live_react/compare/v0.2.0-rc.0...v1.0.0-rc.0) (2024-10-05)
### Breaking Changes:

* vitejs: switch from Mix Esbuild to Vite.js

## [v0.2.0-rc.0](https://github.com/mrdotb/live_react/compare/v0.2.0-rc.0...v0.2.0-rc.0) (2024-09-17)

### Features

* Add SSR support

### Bug Fixes:

* ssr: remove compiler warning when using live_react without SSR

## v0.1.0 (2024-06-29)

Initial release

================
File: LICENSE.md
================
# MIT License

Copyright (c) 2024 Mrdotb

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

================
File: logo.svg
================
<?xml version="1.0" encoding="UTF-8"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->
<svg width="170.22mm" height="60.263mm" version="1.1" viewBox="0 0 170.22 60.263" xmlns="http://www.w3.org/2000/svg">
 <g transform="translate(-11.898 -31.072)">
  <g transform="matrix(.92733 0 0 .92733 24.719 40.162)" fill="#fd4f00">
   <path d="m26.371 33.477-0.552-0.1c-3.92-0.729-6.397-3.1-7.57-6.829-0.733-2.324 0.597-4.035 3.035-4.148 1.995-0.092 3.362 1.055 4.57 2.39 1.557 1.72 2.984 3.558 4.514 5.305 2.202 2.515 4.797 4.134 8.347 3.634 3.183-0.448 5.958-1.725 8.371-3.828 0.363-0.316 0.761-0.592 1.144-0.886l-0.241-0.284c-2.027 0.63-4.093 0.841-6.205 0.735-3.195-0.16-6.24-0.828-8.964-2.582-2.486-1.601-4.319-3.746-5.19-6.611-0.704-2.315 0.736-3.934 3.135-3.6 0.948 0.133 1.746 0.56 2.463 1.165 0.583 0.493 1.143 1.015 1.738 1.493 2.8 2.25 6.712 2.375 10.265-0.068-5.842-0.026-9.817-3.24-13.308-7.313-1.366-1.594-2.7-3.216-4.095-4.785-2.698-3.036-5.692-5.71-9.79-6.623-5.238-1.165-10.293-0.402-15.145 1.819-0.967 0.443-1.896 0.958-2.893 1.788 0.494 0 0.763 6e-3 1.032 0 2.446-0.064 4.28 1.023 5.602 3.024 0.962 1.457 1.415 3.104 1.761 4.798 0.513 2.515 0.247 5.078 0.544 7.605 0.761 6.494 4.08 11.026 10.26 13.346 2.267 0.852 4.591 1.135 7.172 0.555zm-15.62-29.625c-0.976 0.246-1.756-0.148-2.56-0.962 1.377-0.343 2.592-0.476 3.897-0.528-0.107 0.848-0.607 1.306-1.336 1.49zm32.002 37.924c-0.085-0.626-0.62-0.901-1.04-1.228-1.857-1.446-4.03-1.958-6.333-2-1.375-0.026-2.735-0.128-4.031-0.61-0.595-0.22-1.26-0.505-1.244-1.272 0.015-0.78 0.693-1 1.31-1.184 0.505-0.15 1.026-0.247 1.6-0.382-1.46-0.936-2.886-1.065-4.787-0.3-2.993 1.202-5.943 1.06-8.926-0.017-1.684-0.608-3.179-1.563-4.735-2.408l-0.077 0.057c1.29 2.115 3.034 3.817 5.004 5.271 3.793 2.8 7.936 4.471 12.784 3.73a66.714 66.714 0 0 1 4.722-0.556c1.98-0.16 3.866 0.398 5.753 0.899zm-9.14-30.345c-0.105-0.076-0.206-0.266-0.42-0.069 1.745 2.36 3.985 4.098 6.683 5.193 4.354 1.767 8.773 2.07 13.293 0.51 3.51-1.21 6.033-0.028 7.343 3.38 0.19-3.955-2.137-6.837-5.843-7.401-2.084-0.318-4.01 0.373-5.962 0.94-5.434 1.575-10.485 0.798-15.094-2.553zm27.085 15.425c0.708 0.059 1.416 0.123 2.124 0.185-1.6-1.405-3.55-1.517-5.523-1.404-3.003 0.17-5.167 1.903-7.14 3.972-1.739 1.824-3.31 3.87-5.903 4.604 0.043 0.078 0.054 0.117 0.066 0.117 0.35 5e-3 0.699 0.021 1.047 5e-3 3.768-0.17 7.317-0.965 10.14-3.7 0.89-0.86 1.685-1.817 2.544-2.71 0.716-0.746 1.584-1.159 2.645-1.07zm-8.753-4.67c-2.812 0.246-5.254 1.409-7.548 2.943-1.766 1.18-3.654 1.738-5.776 1.37-0.374-0.066-0.75-0.114-1.124-0.17l-0.013 0.156c0.135 0.07 0.265 0.151 0.405 0.207 0.354 0.14 0.702 0.308 1.07 0.395 4.083 0.971 7.992 0.474 11.516-1.803 2.221-1.435 4.521-1.707 7.013-1.336 0.252 0.038 0.503 0.083 0.756 0.107 0.234 0.022 0.479 0.255 0.795 3e-3 -2.179-1.574-4.526-2.096-7.094-1.872zm-10.049-9.544c1.475 0.051 2.943-0.142 4.486-1.059-0.452 0.04-0.643 0.04-0.827 0.076-2.126 0.424-4.033-0.04-5.733-1.383-0.623-0.493-1.257-0.974-1.889-1.457-2.503-1.914-5.374-2.555-8.514-2.5 0.05 0.154 0.054 0.26 0.108 0.315 3.417 3.455 7.371 5.836 12.369 6.008zm24.727 17.731c-2.114-2.097-4.952-2.367-7.578-0.537 1.738 0.078 3.043 0.632 4.101 1.728a13 13 0 0 0 1.182 1.106c1.6 1.29 4.311 1.352 5.896 0.155-1.861-0.726-1.861-0.726-3.601-2.452zm-21.058 16.06c-1.858-3.46-4.981-4.24-8.59-4.008a9.667 9.667 0 0 1 2.977 1.39c0.84 0.586 1.547 1.311 2.243 2.055 1.38 1.473 3.534 2.376 4.962 2.07-0.656-0.412-1.238-0.848-1.592-1.507zm0 0-6e-3 6e-3 -0.036-4e-3 0.021 0.018 0.012 0.053zm0 0a0.127 0.127 0 0 0 0.015 0.043c5e-3 8e-3 0.038 0 0.058-2e-3zm0 0-8e-3 0.01 5e-3 0.026 0.024 0.014z" fill="#fd4f00"/>
  </g>
  <path d="m158.79 52.42c-0.59559-0.205-1.2128-0.39896-1.8482-0.5824 0.10444-0.42626 0.2003-0.84699 0.28553-1.2606 1.399-6.7911 0.4843-12.262-2.6393-14.063-2.9951-1.7272-7.8934 0.07369-12.84 4.3789-0.47572 0.41398-0.95276 0.85231-1.4296 1.3117-0.31772-0.30393-0.63493-0.59763-0.95133-0.87857-5.1846-4.6035-10.381-6.5434-13.502-4.7369-2.9923 1.7322-3.8784 6.8755-2.619 13.311 0.12161 0.62165 0.26377 1.2565 0.42452 1.9019-0.7355 0.20879-1.4456 0.43136-2.1249 0.66815-6.0784 2.1192-9.9604 5.4405-9.9604 8.8856 0 3.5581 4.1673 7.127 10.498 9.2909 0.49963 0.17076 1.0181 0.33224 1.5523 0.48553-0.17342 0.6981-0.32426 1.3822-0.45088 2.0494-1.2008 6.3243-0.26306 11.346 2.7212 13.067 3.0825 1.7776 8.2558-0.04959 13.293-4.4529 0.39815-0.34807 0.79774-0.7172 1.198-1.1041 0.51885 0.49963 1.0369 0.97248 1.5521 1.416 4.8794 4.1989 9.6986 5.8944 12.68 4.1683 3.0794-1.7827 4.0802-7.1772 2.7809-13.741-0.0992-0.50126-0.21471-1.0134-0.3444-1.5346 0.3633-0.10741 0.71996-0.21829 1.0677-0.33356 6.5818-2.1807 10.864-5.7061 10.864-9.3118 0-3.4576-4.0072-6.8013-10.208-8.9359zm-1.4276 15.92c-0.31394 0.10393-0.63606 0.20439-0.96431 0.30178-0.72661-2.3003-1.7073-4.7463-2.9073-7.2735 1.1452-2.467 2.0879-4.8817 2.7942-7.1671 0.58732 0.16995 1.1574 0.3492 1.7066 0.53836 5.3129 1.829 8.5537 4.5332 8.5537 6.6168 0 2.2195-3.5 5.1006-9.1829 6.9837zm-2.358 4.6725c0.57454 2.9022 0.6566 5.5262 0.27602 7.5774-0.34194 1.8432-1.0296 3.0721-1.8799 3.5642-1.8094 1.0473-5.6786-0.31405-9.8516-3.905-0.47837-0.41164-0.96022-0.85118-1.4436-1.3164 1.6177-1.7693 3.2346-3.8262 4.8126-6.1105 2.7755-0.24629 5.3977-0.64893 7.7757-1.1986 0.11712 0.47245 0.22116 0.9358 0.31078 1.3888zm-23.846 10.961c-1.7678 0.62431-3.1757 0.64219-4.0268 0.15146-1.811-1.0445-2.5639-5.0765-1.5369-10.485 0.11763-0.6194 0.25763-1.2557 0.419-1.906 2.3519 0.52007 4.9549 0.89431 7.737 1.1199 1.5886 2.2353 3.2521 4.2899 4.9285 6.089-0.36626 0.35359-0.7311 0.69022-1.0939 1.0074-2.2275 1.9471-4.4598 3.3286-6.427 4.0234zm-8.2818-15.647c-2.7995-0.95684-5.1115-2.2005-6.6962-3.5575-1.424-1.2195-2.1429-2.4302-2.1429-3.4126 0-2.0906 3.1168-4.7572 8.3152-6.5696 0.63075-0.21992 1.291-0.42718 1.9762-0.62185 0.71843 2.337 1.6609 4.7804 2.7982 7.2511-1.152 2.5074-2.1079 4.9898-2.8334 7.3541-0.48849-0.14042-0.96175-0.2882-1.4171-0.44374zm2.7761-18.897c-1.079-5.5142-0.36239-9.674 1.4408-10.718 1.9208-1.112 6.1681 0.47347 10.645 4.4483 0.28615 0.25405 0.57342 0.51996 0.8615 0.79507-1.6681 1.7912-3.3164 3.8304-4.8909 6.0525-2.7002 0.25027-5.2849 0.65231-7.6613 1.1907-0.14941-0.60101-0.28175-1.1915-0.39467-1.7688zm24.765 6.1152c-0.5681-0.98127-1.1513-1.9393-1.7459-2.8713 1.8318 0.23157 3.5869 0.53898 5.2351 0.91516-0.49482 1.5859-1.1116 3.244-1.8376 4.9438-0.52078-0.98873-1.0716-1.9856-1.6517-2.9877zm-10.099-9.8368c1.1313 1.2256 2.2642 2.594 3.3786 4.0787-1.1229-0.05306-2.2597-0.08061-3.406-0.08061-1.1354 0-2.2638 0.02696-3.3798 0.07908 1.1154-1.4709 2.2582-2.8374 3.4072-4.0772zm-10.164 9.8537c-0.56748 0.98404-1.1081 1.9755-1.6207 2.9689-0.71424-1.6939-1.3253-3.3595-1.8244-4.9679 1.6381-0.36657 3.3849-0.66631 5.2051-0.89348-0.60295 0.94049-1.191 1.9056-1.76 2.8923zm1.8124 14.657c-1.8806-0.20981-3.6537-0.49411-5.2913-0.85057 0.50709-1.6371 1.1316-3.3383 1.861-5.0686 0.51393 0.99262 1.0567 1.9845 1.6276 2.9707h1.1e-4c0.58158 1.0047 1.1841 1.9888 1.8026 2.9485zm8.4194 6.9592c-1.1625-1.2542-2.322-2.6416-3.4544-4.134 1.0993 0.04314 2.2201 0.06518 3.3591 0.06518 1.1702 0 2.3271-0.02636 3.4657-0.07705-1.118 1.5192-2.2468 2.9088-3.3705 4.1458zm11.707-12.967c0.76738 1.7491 1.4143 3.4414 1.9279 5.0506-1.6646 0.37975-3.4619 0.68562-5.3556 0.9129 0.596-0.94449 1.1843-1.919 1.7624-2.9214 0.58486-1.0142 1.1402-2.0299 1.6653-3.042zm-3.7898 1.8167c-0.89747 1.5561-1.8189 3.0416-2.7542 4.4438-1.7037 0.12181-3.4638 0.18456-5.2577 0.18456-1.7867 0-3.5246-0.05552-5.1981-0.16413-0.9731-1.4206-1.9145-2.9105-2.8063-4.4509h2.1e-4c-0.8894-1.5362-1.708-3.0854-2.4497-4.6258 0.74152-1.5441 1.558-3.095 2.4422-4.6284l-2.1e-4 3.13e-4c0.88664-1.5375 1.8198-3.0202 2.7839-4.4319 1.7075-0.12907 3.4584-0.19641 5.2279-0.19641h1.1e-4c1.7775 0 3.5306 0.0679 5.2376 0.19805 0.94939 1.4014 1.8762 2.8792 2.7663 4.417 0.90023 1.555 1.7272 3.0956 2.475 4.6065-0.74561 1.5369-1.5707 3.093-2.467 4.6473zm5.0596-27.389c1.9226 1.1087 2.6702 5.5801 1.4623 11.444-0.077 0.37414-0.16382 0.75522-0.25804 1.1414-2.382-0.54961-4.9685-0.95859-7.6766-1.2126-1.5776-2.2465-3.2124-4.2889-4.8533-6.0571 0.44118-0.42442 0.88174-0.82911 1.3205-1.211 4.2386-3.6887 8.2002-5.1451 10.005-4.1042zm-13.072 17.591c2.8314 0 5.1268 2.2953 5.1268 5.1268 0 2.8314-2.2954 5.1268-5.1268 5.1268s-5.1268-2.2954-5.1268-5.1268c0-2.8315 2.2954-5.1268 5.1268-5.1268z" fill="#00d8ff" stroke-width=".22427"/>
  <rect x="98.063" y="53.367" width="2.1191" height="14.502" fill="#fd4f00" stroke-width="0" style="paint-order:markers stroke fill"/>
  <rect transform="rotate(89.974)" x="59.036" y="-106.43" width="2.1191" height="14.502" fill="#fd4f00" stroke-width="0" style="paint-order:markers stroke fill"/>
 </g>
</svg>

================
File: mix.exs
================
defmodule LiveReact.MixProject do
  use Mix.Project

  @source_url "https://github.com/mrdotb/live_react"
  @version "1.0.0-rc.3"

  def project do
    [
      app: :live_react,
      version: @version,
      elixir: "~> 1.16",
      start_permanent: Mix.env() == :prod,
      deps: deps(),
      description: "E2E reactivity for React and LiveView",
      package: package(),
      docs: docs(),
      source_url: @source_url
    ]
  end

  # Run "mix help compile.app" to learn about applications.
  def application do
    conditionals =
      case Application.get_env(:live_react, :ssr_module) do
        # Needed to use :httpc.request
        LiveReact.SSR.ViteJS -> [:inets]
        _ -> []
      end

    [
      extra_applications: [:logger] ++ conditionals
    ]
  end

  # Run "mix help deps" to learn about dependencies.
  defp deps do
    [
      {:jason, "~> 1.2"},
      {:nodejs, "~> 3.1", optional: true},
      {:phoenix, ">= 1.7.0"},
      {:phoenix_html, ">= 3.3.1"},
      {:phoenix_live_view, ">= 0.18.0"},
      {:telemetry, "~> 0.4 or ~> 1.0"},
      {:ex_doc, "~> 0.19", only: :dev, runtime: false},
      {:git_ops, "~> 2.6.1", only: [:dev]}
    ]
  end

  defp package do
    [
      maintainers: ["Baptiste Chaleil"],
      licenses: ["MIT"],
      links: %{
        Github: "https://github.com/mrdotb/live_react"
      },
      files:
        ~w(assets/copy assets/js lib)s ++
          ~w(CHANGELOG.md LICENSE.md mix.exs package.json README.md .formatter.exs)s
    ]
  end

  defp docs do
    [
      name: "LiveReact",
      source_ref: "v#{@version}",
      source_url: "https://github.com/mrdotb/live_react",
      homepage_url: "https://github.com/mrdotb/live_react",
      main: "readme",
      extras: [
        "README.md",
        "guides/installation.md",
        "guides/deployment.md",
        "guides/development.md",
        "guides/ssr.md",
        "CHANGELOG.md"
      ]
    ]
  end
end

================
File: mix.lock
================
%{
  "castore": {:hex, :castore, "1.0.10", "43bbeeac820f16c89f79721af1b3e092399b3a1ecc8df1a472738fd853574911", [:mix], [], "hexpm", "1b0b7ea14d889d9ea21202c43a4fa015eb913021cb535e8ed91946f4b77a8848"},
  "earmark_parser": {:hex, :earmark_parser, "1.4.41", "ab34711c9dc6212dda44fcd20ecb87ac3f3fce6f0ca2f28d4a00e4154f8cd599", [:mix], [], "hexpm", "a81a04c7e34b6617c2792e291b5a2e57ab316365c2644ddc553bb9ed863ebefa"},
  "esbuild": {:hex, :esbuild, "0.8.1", "0cbf919f0eccb136d2eeef0df49c4acf55336de864e63594adcea3814f3edf41", [:mix], [{:castore, ">= 0.0.0", [hex: :castore, repo: "hexpm", optional: false]}, {:jason, "~> 1.4", [hex: :jason, repo: "hexpm", optional: false]}], "hexpm", "25fc876a67c13cb0a776e7b5d7974851556baeda2085296c14ab48555ea7560f"},
  "ex_doc": {:hex, :ex_doc, "0.35.1", "de804c590d3df2d9d5b8aec77d758b00c814b356119b3d4455e4b8a8687aecaf", [:mix], [{:earmark_parser, "~> 1.4.39", [hex: :earmark_parser, repo: "hexpm", optional: false]}, {:makeup_c, ">= 0.1.0", [hex: :makeup_c, repo: "hexpm", optional: true]}, {:makeup_elixir, "~> 0.14 or ~> 1.0", [hex: :makeup_elixir, repo: "hexpm", optional: false]}, {:makeup_erlang, "~> 0.1 or ~> 1.0", [hex: :makeup_erlang, repo: "hexpm", optional: false]}, {:makeup_html, ">= 0.1.0", [hex: :makeup_html, repo: "hexpm", optional: true]}], "hexpm", "2121c6402c8d44b05622677b761371a759143b958c6c19f6558ff64d0aed40df"},
  "git_cli": {:hex, :git_cli, "0.3.0", "a5422f9b95c99483385b976f5d43f7e8233283a47cda13533d7c16131cb14df5", [:mix], [], "hexpm", "78cb952f4c86a41f4d3511f1d3ecb28edb268e3a7df278de2faa1bd4672eaf9b"},
  "git_ops": {:hex, :git_ops, "2.6.3", "38c6e381b8281b86e2911fa39bea4eab2d171c86d7428786566891efb73b68c3", [:mix], [{:git_cli, "~> 0.2", [hex: :git_cli, repo: "hexpm", optional: false]}, {:nimble_parsec, "~> 1.0", [hex: :nimble_parsec, repo: "hexpm", optional: false]}], "hexpm", "a81cb6c6a2a026a4d48cb9a2e1dfca203f9283a3a70aa0c7bc171970c44f23f8"},
  "jason": {:hex, :jason, "1.4.4", "b9226785a9aa77b6857ca22832cffa5d5011a667207eb2a0ad56adb5db443b8a", [:mix], [{:decimal, "~> 1.0 or ~> 2.0", [hex: :decimal, repo: "hexpm", optional: true]}], "hexpm", "c5eb0cab91f094599f94d55bc63409236a8ec69a21a67814529e8d5f6cc90b3b"},
  "makeup": {:hex, :makeup, "1.2.1", "e90ac1c65589ef354378def3ba19d401e739ee7ee06fb47f94c687016e3713d1", [:mix], [{:nimble_parsec, "~> 1.4", [hex: :nimble_parsec, repo: "hexpm", optional: false]}], "hexpm", "d36484867b0bae0fea568d10131197a4c2e47056a6fbe84922bf6ba71c8d17ce"},
  "makeup_elixir": {:hex, :makeup_elixir, "1.0.0", "74bb8348c9b3a51d5c589bf5aebb0466a84b33274150e3b6ece1da45584afc82", [:mix], [{:makeup, "~> 1.0", [hex: :makeup, repo: "hexpm", optional: false]}, {:nimble_parsec, "~> 1.2.3 or ~> 1.3", [hex: :nimble_parsec, repo: "hexpm", optional: false]}], "hexpm", "49159b7d7d999e836bedaf09dcf35ca18b312230cf901b725a64f3f42e407983"},
  "makeup_erlang": {:hex, :makeup_erlang, "1.0.1", "c7f58c120b2b5aa5fd80d540a89fdf866ed42f1f3994e4fe189abebeab610839", [:mix], [{:makeup, "~> 1.0", [hex: :makeup, repo: "hexpm", optional: false]}], "hexpm", "8a89a1eeccc2d798d6ea15496a6e4870b75e014d1af514b1b71fa33134f57814"},
  "mime": {:hex, :mime, "2.0.6", "8f18486773d9b15f95f4f4f1e39b710045fa1de891fada4516559967276e4dc2", [:mix], [], "hexpm", "c9945363a6b26d747389aac3643f8e0e09d30499a138ad64fe8fd1d13d9b153e"},
  "nimble_parsec": {:hex, :nimble_parsec, "1.4.0", "51f9b613ea62cfa97b25ccc2c1b4216e81df970acd8e16e8d1bdc58fef21370d", [:mix], [], "hexpm", "9c565862810fb383e9838c1dd2d7d2c437b3d13b267414ba6af33e50d2d1cf28"},
  "nodejs": {:hex, :nodejs, "3.1.2", "a4dc114102782dcdc5fc13989398d19e594dd4e3a69181c8a8d54d08f4f950a4", [:mix], [{:jason, "~> 1.0", [hex: :jason, repo: "hexpm", optional: false]}, {:poolboy, "~> 1.5.1", [hex: :poolboy, repo: "hexpm", optional: false]}, {:ssl_verify_fun, "~> 1.1.7", [hex: :ssl_verify_fun, repo: "hexpm", optional: false]}], "hexpm", "7b01eee72c16d919b122f7096918abe9d6062d3cc299afe694e72412bbe90c92"},
  "phoenix": {:hex, :phoenix, "1.7.17", "2fcdceecc6fb90bec26fab008f96abbd0fd93bc9956ec7985e5892cf545152ca", [:mix], [{:castore, ">= 0.0.0", [hex: :castore, repo: "hexpm", optional: false]}, {:jason, "~> 1.0", [hex: :jason, repo: "hexpm", optional: true]}, {:phoenix_pubsub, "~> 2.1", [hex: :phoenix_pubsub, repo: "hexpm", optional: false]}, {:phoenix_template, "~> 1.0", [hex: :phoenix_template, repo: "hexpm", optional: false]}, {:phoenix_view, "~> 2.0", [hex: :phoenix_view, repo: "hexpm", optional: true]}, {:plug, "~> 1.14", [hex: :plug, repo: "hexpm", optional: false]}, {:plug_cowboy, "~> 2.7", [hex: :plug_cowboy, repo: "hexpm", optional: true]}, {:plug_crypto, "~> 1.2 or ~> 2.0", [hex: :plug_crypto, repo: "hexpm", optional: false]}, {:telemetry, "~> 0.4 or ~> 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}, {:websock_adapter, "~> 0.5.3", [hex: :websock_adapter, repo: "hexpm", optional: false]}], "hexpm", "50e8ad537f3f7b0efb1509b2f75b5c918f697be6a45d48e49a30d3b7c0e464c9"},
  "phoenix_html": {:hex, :phoenix_html, "4.1.1", "4c064fd3873d12ebb1388425a8f2a19348cef56e7289e1998e2d2fa758aa982e", [:mix], [], "hexpm", "f2f2df5a72bc9a2f510b21497fd7d2b86d932ec0598f0210fed4114adc546c6f"},
  "phoenix_live_view": {:hex, :phoenix_live_view, "1.0.0", "3a10dfce8f87b2ad4dc65de0732fc2a11e670b2779a19e8d3281f4619a85bce4", [:mix], [{:floki, "~> 0.36", [hex: :floki, repo: "hexpm", optional: true]}, {:jason, "~> 1.0", [hex: :jason, repo: "hexpm", optional: true]}, {:phoenix, "~> 1.6.15 or ~> 1.7.0", [hex: :phoenix, repo: "hexpm", optional: false]}, {:phoenix_html, "~> 3.3 or ~> 4.0", [hex: :phoenix_html, repo: "hexpm", optional: false]}, {:phoenix_template, "~> 1.0", [hex: :phoenix_template, repo: "hexpm", optional: false]}, {:phoenix_view, "~> 2.0", [hex: :phoenix_view, repo: "hexpm", optional: true]}, {:plug, "~> 1.15", [hex: :plug, repo: "hexpm", optional: false]}, {:telemetry, "~> 0.4.2 or ~> 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "254caef0028765965ca6bd104cc7d68dcc7d57cc42912bef92f6b03047251d99"},
  "phoenix_pubsub": {:hex, :phoenix_pubsub, "2.1.3", "3168d78ba41835aecad272d5e8cd51aa87a7ac9eb836eabc42f6e57538e3731d", [:mix], [], "hexpm", "bba06bc1dcfd8cb086759f0edc94a8ba2bc8896d5331a1e2c2902bf8e36ee502"},
  "phoenix_template": {:hex, :phoenix_template, "1.0.4", "e2092c132f3b5e5b2d49c96695342eb36d0ed514c5b252a77048d5969330d639", [:mix], [{:phoenix_html, "~> 2.14.2 or ~> 3.0 or ~> 4.0", [hex: :phoenix_html, repo: "hexpm", optional: true]}], "hexpm", "2c0c81f0e5c6753faf5cca2f229c9709919aba34fab866d3bc05060c9c444206"},
  "plug": {:hex, :plug, "1.16.1", "40c74619c12f82736d2214557dedec2e9762029b2438d6d175c5074c933edc9d", [:mix], [{:mime, "~> 1.0 or ~> 2.0", [hex: :mime, repo: "hexpm", optional: false]}, {:plug_crypto, "~> 1.1.1 or ~> 1.2 or ~> 2.0", [hex: :plug_crypto, repo: "hexpm", optional: false]}, {:telemetry, "~> 0.4.3 or ~> 1.0", [hex: :telemetry, repo: "hexpm", optional: false]}], "hexpm", "a13ff6b9006b03d7e33874945b2755253841b238c34071ed85b0e86057f8cddc"},
  "plug_crypto": {:hex, :plug_crypto, "2.1.0", "f44309c2b06d249c27c8d3f65cfe08158ade08418cf540fd4f72d4d6863abb7b", [:mix], [], "hexpm", "131216a4b030b8f8ce0f26038bc4421ae60e4bb95c5cf5395e1421437824c4fa"},
  "poolboy": {:hex, :poolboy, "1.5.2", "392b007a1693a64540cead79830443abf5762f5d30cf50bc95cb2c1aaafa006b", [:rebar3], [], "hexpm", "dad79704ce5440f3d5a3681c8590b9dc25d1a561e8f5a9c995281012860901e3"},
  "ssl_verify_fun": {:hex, :ssl_verify_fun, "1.1.7", "354c321cf377240c7b8716899e182ce4890c5938111a1296add3ec74cf1715df", [:make, :mix, :rebar3], [], "hexpm", "fe4c190e8f37401d30167c8c405eda19469f34577987c76dde613e838bbc67f8"},
  "telemetry": {:hex, :telemetry, "1.3.0", "fedebbae410d715cf8e7062c96a1ef32ec22e764197f70cda73d82778d61e7a2", [:rebar3], [], "hexpm", "7015fc8919dbe63764f4b4b87a95b7c0996bd539e0d499be6ec9d7f3875b79e6"},
  "websock": {:hex, :websock, "0.5.3", "2f69a6ebe810328555b6fe5c831a851f485e303a7c8ce6c5f675abeb20ebdadc", [:mix], [], "hexpm", "6105453d7fac22c712ad66fab1d45abdf049868f253cf719b625151460b8b453"},
  "websock_adapter": {:hex, :websock_adapter, "0.5.8", "3b97dc94e407e2d1fc666b2fb9acf6be81a1798a2602294aac000260a7c4a47d", [:mix], [{:bandit, ">= 0.6.0", [hex: :bandit, repo: "hexpm", optional: true]}, {:plug, "~> 1.14", [hex: :plug, repo: "hexpm", optional: false]}, {:plug_cowboy, "~> 2.6", [hex: :plug_cowboy, repo: "hexpm", optional: true]}, {:websock, "~> 0.5", [hex: :websock, repo: "hexpm", optional: false]}], "hexpm", "315b9a1865552212b5f35140ad194e67ce31af45bcee443d4ecb96b5fd3f3782"},
}

================
File: package.json
================
{
  "name": "live_react",
  "version": "0.1.0",
  "description": "E2E reactivity from React and LiveView",
  "license": "MIT",
  "module": "./assets/js/live_react/index.js",
  "exports": {
    ".": "./assets/js/live_react/index.mjs",
    "./server": "./assets/js/live_react/server.mjs",
    "./vite-plugin": "./assets/js/live_react/vite-plugin.js"
  },
  "author": "Baptiste Chaleil <hello@mrdotb.com>",
  "repository": {
    "type": "git",
    "url": "git://github.com/mrdotb/live_react.git"
  },
  "files": [
    "README.MD",
    "LICENSE.md",
    "package.json",
    "assets/js/live_react/*"
  ],
  "devDependencies": {
    "prettier": "^3.3.2"
  },
  "scripts": {
    "format": "npx prettier --write ."
  }
}

================
File: README.md
================
[![Hex.pm](https://img.shields.io/hexpm/v/live_react.svg)](https://hex.pm/packages/live_react)
[![Hexdocs.pm](https://img.shields.io/badge/docs-hexdocs.pm-purple)](https://hexdocs.pm/live_react)
[![GitHub](https://img.shields.io/github/stars/mrdotb/live_react?style=social)](https://github.com/mrdotb/live_react)

# LiveReact

React inside Phoenix LiveView.

![logo](https://github.com/mrdotb/live_react/blob/main/logo.svg?raw=true)

## Features

- ⚡ **End-To-End Reactivity** with LiveView
- 🔋 **Server-Side Rendered** (SSR) React
- 🦄 **Tailwind** Support
- 💀 **Dead View** Support
- 🐌 **Lazy-loading** React Components
- 🦥 **Slot** Interoperability
- 🚀 **Amazing DX** with Vite

## Resources

- [Demo](https://live-react-examples.fly.dev/simple)
- [HexDocs](https://hexdocs.pm/live_react)
- [HexPackage](https://hex.pm/packages/live_react)
- [Phoenix LiveView](https://github.com/phoenixframework/phoenix_live_view)
- [Installation](/guides/installation.md)
- [Deployment](/guides/deployment.md)
- [Development](/guides/development.md)
- [SSR](/guides/ssr.md)

## Example

Visit the [demo website](https://live-react-examples.fly.dev/simple) to see examples of what you can do with LiveReact.

You can also check out the [PhoenixAnalytics project](https://github.com/lalabuy948/PhoenixAnalytics) for a real-world example.

## Why LiveReact

Phoenix LiveView enables rich, real-time user experiences with server-rendered HTML.
It works by communicating any state changes through a websocket and updating the DOM in realtime.
You can get a really good user experience without ever needing to write any client side code.

LiveReact builds on top of Phoenix LiveView to allow for easy client side state management while still allowing for communication over the websocket.

## Installation

see [Installation](/guides/installation.md)

## Roadmap 🎯

- [ ] Pre-build SSR components for static props
- [ ] `useLiveForm` - an utility to efforlessly use Ecto changesets & server-side validation, similar to HEEX
- [ ] Add support for Phoenix streams as props

## Credits

I was inspired by the following libraries:

- [LiveVue](https://github.com/Valian/live_vue)
- [LiveSvelte](https://github.com/woutdp/live_svelte)

I had a need for a similar library for React and so I created LiveReact 👍
